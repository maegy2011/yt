'use client'

import { useState, useEffect, useCallback, useMemo } from 'react'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Checkbox } from '@/components/ui/checkbox'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { ScrollArea } from '@/components/ui/scroll-area'
import { 
  Home, 
  Search, 
  Play, 
  Clock, 
  Heart, 
  User, 
  Check,
  Loader2,
  Edit,
  Trash2,
  Users,
  Plus,
  Settings
} from 'lucide-react'
import { searchVideos, formatViewCount, formatPublishedAt, formatDuration } from '@/lib/youtube'
import { getLoadingMessage, getConfirmationMessage } from '@/lib/loading-messages'
import type { Video, Channel } from '@/lib/youtube'
import { VideoCardSkeleton, VideoGridSkeleton } from '@/components/video-skeleton'
import { SplashScreen } from '@/components/splash-screen'
import { Toaster } from '@/components/ui/toaster'
import { useToast } from '@/hooks/use-toast'

// Enhanced types with better safety
type Tab = 'home' | 'search' | 'player' | 'watched' | 'channels' | 'favorites'

interface BaseVideoData {
  id: string
  videoId: string
  title: string
  channelName: string
  thumbnail: string
  duration?: string
  viewCount?: number
}

interface WatchedVideo extends BaseVideoData {
  watchedAt: string
}

type FavoriteVideo = BaseVideoData

interface FavoriteChannel {
  id: string
  channelId: string
  name: string
  thumbnail?: string
  subscriberCount?: number
}

interface SearchResults {
  items: Video[]
  error?: string
}

export default function MyTubeApp() {
  const { toast } = useToast()
  
  // Core state
  const [activeTab, setActiveTab] = useState<Tab>('home')
  const [searchQuery, setSearchQuery] = useState('')
  const [searchResults, setSearchResults] = useState<SearchResults | null>(null)
  const [selectedVideo, setSelectedVideo] = useState<Video | null>(null)
  const [loading, setLoading] = useState(false)
  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set())
  const [multiSelectMode, setMultiSelectMode] = useState(false)
  const [showSplashScreen, setShowSplashScreen] = useState(true)
  const [dynamicLoadingMessage, setDynamicLoadingMessage] = useState('')
  
  // Data states
  const [watchedVideos, setWatchedVideos] = useState<WatchedVideo[]>([])
  const [favoriteChannels, setFavoriteChannels] = useState<FavoriteChannel[]>([])
  const [favoriteVideos, setFavoriteVideos] = useState<FavoriteVideo[]>([])
  
  // Channel search states
  const [channelSearchResults, setChannelSearchResults] = useState<any[]>([])
  const [channelSearchLoading, setChannelSearchLoading] = useState(false)
  const [channelVideos, setChannelVideos] = useState<any[]>([])
  const [channelVideosLoading, setChannelVideosLoading] = useState(false)
  
  // Infinite scroll states
  const [continuationToken, setContinuationToken] = useState<string | null>(null)
  const [loadingMore, setLoadingMore] = useState(false)
  const [hasMoreVideos, setHasMoreVideos] = useState(false)
  const [currentSearchQuery, setCurrentSearchQuery] = useState<string>('') // Track the query for pagination
  
  // Search cache
  const [searchCache, setSearchCache] = useState<Map<string, { items: Video[], continuation: string | null, hasMore: boolean, timestamp: number }>>(new Map())
  const CACHE_DURATION = 5 * 60 * 1000 // 5 minutes cache
  
  // Dialog states
  const [showSettings, setShowSettings] = useState(false)

  // Enhanced toast system with dynamic messages
  const showToast = useCallback((title: string, description?: string, variant: 'success' | 'error' | 'info' = 'info') => {
    toast({
      title,
      description,
      variant,
    })
  }, [toast])

  // Show dynamic loading message
  const showDynamicLoading = useCallback((operation: 'search' | 'loadMore' | 'favorites' | 'channels' | 'general') => {
    const message = getLoadingMessage(operation)
    setDynamicLoadingMessage(message)
    return message
  }, [])

  // Show dynamic confirmation message
  const showDynamicConfirmation = useCallback((operation: keyof typeof confirmationMessages, ...args: any[]) => {
    const message = getConfirmationMessage(operation, ...args)
    showToast('Success!', message, 'success')
    setDynamicLoadingMessage('')
  }, [showToast])

  // Handle splash screen completion
  const handleSplashComplete = useCallback(() => {
    setShowSplashScreen(false)
    showToast('Welcome!', 'MyTube is ready to use', 'success')
  }, [showToast])

  // Load initial data
  useEffect(() => {
    const loadInitialData = async () => {
      try {
        await Promise.all([
          loadWatchedVideos(),
          loadFavoriteChannels(),
          loadFavoriteVideos()
        ])
        // Load channel videos after channels are loaded
        if (favoriteChannels.length > 0) {
          await loadChannelVideos()
        }
        // Removed auto-search on load - user needs to manually search
      } catch (error) {
        showToast('Failed to load initial data', 'Please refresh the page', 'error')
      }
    }
    
    // Only load initial data after splash screen is complete
    if (!showSplashScreen) {
      loadInitialData()
    }
  }, [showSplashScreen])

  // Load channel videos when favorite channels change
  useEffect(() => {
    if (!showSplashScreen && favoriteChannels.length > 0) {
      loadChannelVideos()
    }
  }, [favoriteChannels.length, showSplashScreen])

  // Cache helper functions
  const getCachedResults = useCallback((query: string) => {
    const cached = searchCache.get(query)
    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
      console.log('Using cached results for query:', query)
      return cached
    }
    return null
  }, [searchCache])

  const setCachedResults = useCallback((query: string, items: Video[], continuation: string | null, hasMore: boolean) => {
    console.log('Caching results for query:', query, { itemsCount: items.length, hasContinuation: !!continuation })
    setSearchCache(prev => {
      const newCache = new Map(prev)
      newCache.set(query, {
        items,
        continuation,
        hasMore,
        timestamp: Date.now()
      })
      return newCache
    })
  }, [])

  const clearExpiredCache = useCallback(() => {
    setSearchCache(prev => {
      const newCache = new Map()
      for (const [key, value] of prev.entries()) {
        if (Date.now() - value.timestamp < CACHE_DURATION) {
          newCache.set(key, value)
        }
      }
      return newCache
    })
  }, [])

  // Periodic cache cleanup
  useEffect(() => {
    const cleanupInterval = setInterval(() => {
      clearExpiredCache()
    }, CACHE_DURATION) // Clean up every cache duration
    
    return () => clearInterval(cleanupInterval)
  }, [clearExpiredCache])

  // Touch gesture handling for tab navigation
  useEffect(() => {
    let touchStartX = 0
    let touchEndX = 0
    let touchStartY = 0
    let touchEndY = 0
    const minSwipeDistance = 50
    const maxVerticalDistance = 100

    const handleTouchStart = (e: TouchEvent) => {
      touchStartX = e.changedTouches[0].screenX
      touchStartY = e.changedTouches[0].screenY
    }

    const handleTouchEnd = (e: TouchEvent) => {
      touchEndX = e.changedTouches[0].screenX
      touchEndY = e.changedTouches[0].screenY
      handleSwipeGesture()
    }

    const handleSwipeGesture = () => {
      const swipeDistance = touchEndX - touchStartX
      const verticalDistance = Math.abs(touchEndY - touchStartY)
      
      // Only handle horizontal swipes with limited vertical movement
      if (Math.abs(swipeDistance) > minSwipeDistance && verticalDistance < maxVerticalDistance) {
        const tabs: Tab[] = ['home', 'search', 'player', 'watched', 'channels', 'favorites']
        const currentIndex = tabs.indexOf(activeTab)
        
        if (swipeDistance > 0) {
          // Swipe right - go to previous tab
          if (currentIndex > 0) {
            const newTab = tabs[currentIndex - 1]
            setActiveTab(newTab)
            showToast('Tab Navigation', `Switched to ${newTab}`, 'info')
          }
        } else {
          // Swipe left - go to next tab
          if (currentIndex < tabs.length - 1) {
            const newTab = tabs[currentIndex + 1]
            setActiveTab(newTab)
            showToast('Tab Navigation', `Switched to ${newTab}`, 'info')
          }
        }
      }
    }

    // Add touch event listeners
    document.addEventListener('touchstart', handleTouchStart, { passive: true })
    document.addEventListener('touchend', handleTouchEnd, { passive: true })

    // Cleanup
    return () => {
      document.removeEventListener('touchstart', handleTouchStart)
      document.removeEventListener('touchend', handleTouchEnd)
    }
  }, [activeTab, showToast])

  // Keyboard navigation for tabs
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Only handle keyboard navigation when not in input fields
      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
        return
      }

      const tabs: Tab[] = ['home', 'search', 'player', 'watched', 'channels', 'favorites']
      const currentIndex = tabs.indexOf(activeTab)

      switch (e.key) {
        case 'ArrowLeft':
          e.preventDefault()
          if (currentIndex > 0) {
            const newTab = tabs[currentIndex - 1]
            setActiveTab(newTab)
            showToast('Tab Navigation', `Switched to ${newTab}`, 'info')
          }
          break
        case 'ArrowRight':
          e.preventDefault()
          if (currentIndex < tabs.length - 1) {
            const newTab = tabs[currentIndex + 1]
            setActiveTab(newTab)
            showToast('Tab Navigation', `Switched to ${newTab}`, 'info')
          }
          break
      }
    }

    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [activeTab, showToast])

  // Safe thumbnail extraction with multiple fallback options
  const getThumbnailUrl = useCallback((video: Video | any): string => {
    // Try different thumbnail formats from YouTube API
    if (video.thumbnail?.url) return video.thumbnail.url
    if (video.thumbnail) return video.thumbnail
    
    // Generate YouTube thumbnail URL from video ID
    if (video.id || video.videoId) {
      const videoId = video.id || video.videoId
      // Try multiple YouTube thumbnail sizes in order of preference
      const thumbnailOptions = [
        `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`, // High quality
        `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`,     // High quality
        `https://img.youtube.com/vi/${videoId}/mqdefault.jpg`,     // Medium quality
        `https://img.youtube.com/vi/${videoId}/default.jpg`        // Low quality
      ]
      return thumbnailOptions[0] // Return the highest quality option
    }
    
    // Final fallback - use a generic YouTube icon instead of placeholder
    return 'https://www.youtube.com/img/desktop/yt_1200.png'
  }, [])

  // Safe channel name extraction
  const getChannelName = useCallback((video: Video | any): string => {
    return video.channel?.name || video.channelName || 'Unknown Channel'
  }, [])

  // Safe channel thumbnail extraction
  const getChannelThumbnailUrl = useCallback((channel: any): string => {
    // Try different thumbnail formats from YouTube API
    if (channel.thumbnail?.url) return channel.thumbnail.url
    if (channel.thumbnail) return channel.thumbnail
    
    // Generate channel thumbnail URL from channel ID
    if (channel.channelId || channel.id) {
      const channelId = channel.channelId || channel.id
      return `https://www.youtube.com/channel/${channelId}/avatar.jpg`
    }
    
    // Final fallback - use a generic avatar
    return 'https://www.youtube.com/img/desktop/yt_1200.png'
  }, [])

  const handleSearch = async (append: boolean = false) => {
    const trimmedQuery = searchQuery.trim()
    
    // Safety check for pagination
    if (append && !currentSearchQuery.trim()) {
      console.log('Pagination attempted without current search query - disabling')
      setHasMoreVideos(false)
      return
    }
    
    if (!trimmedQuery && !append) {
      showToast('Search Query Required', 'Please enter a search query', 'info')
      return
    }
    
    if (!append) {
      // New search - validate and set new query
      if (!trimmedQuery) {
        showToast('Search Query Required', 'Please enter a search query', 'info')
        return
      }
      
      // Check cache first for new searches
      const cachedResults = getCachedResults(trimmedQuery)
      if (cachedResults) {
        console.log('Using cached results for:', trimmedQuery)
        setSearchResults({ items: cachedResults.items })
        setContinuationToken(cachedResults.continuation)
        setHasMoreVideos(cachedResults.hasMore)
        setCurrentSearchQuery(trimmedQuery)
        showDynamicConfirmation('search', cachedResults.items.length)
        return
      }
      
      setLoading(true)
      showDynamicLoading('search')
      setContinuationToken(null)
      setCurrentSearchQuery(trimmedQuery) // Set the current search query for pagination
      console.log('Starting new search with query:', trimmedQuery)
    } else {
      // Pagination - always use stored query
      setLoadingMore(true)
      showDynamicLoading('loadMore')
      if (!currentSearchQuery) {
        console.log('No current search query stored for pagination - disabling load more')
        setHasMoreVideos(false)
        setDynamicLoadingMessage('')
        return
      }
      console.log('Loading more videos with stored query:', currentSearchQuery)
    }
    
    try {
      // Always use currentSearchQuery for pagination, new query for initial search
      const queryToUse = append ? currentSearchQuery : trimmedQuery
      const params = new URLSearchParams({
        query: queryToUse,
        type: 'video'
      })
      
      // Add continuation token if loading more
      if (append && continuationToken) {
        params.append('continuation', continuationToken)
        console.log('Using continuation token for query:', queryToUse)
      }

      const response = await fetch(`/api/youtube/search?${params}`)
      if (!response.ok) {
        throw new Error('Failed to search videos')
      }

      const data = await response.json()
      
      if (data.error) {
        showToast('Search Error', data.error, 'error')
        if (!append) setSearchResults(null)
        return
      }
      
      if (!data.items || data.items.length === 0) {
        if (!append) {
          showToast('No Results', `No videos found for "${queryToUse}"`, 'info')
          setSearchResults({ items: [] })
          // Cache empty results
          setCachedResults(queryToUse, [], null, false)
        } else {
          showToast('No More Videos', 'No more videos found for this search', 'info')
        }
        setHasMoreVideos(false)
        return
      }
      
      // Ensure the returned data matches our expected query
      if (data.query && data.query !== queryToUse) {
        console.warn('Search query mismatch:', { 
          expected: queryToUse, 
          received: data.query 
        })
      }
      
      let finalItems: Video[]
      if (append && searchResults?.items) {
        // Append new videos to existing results
        const existingVideoIds = new Set(searchResults.items.map(v => v.id))
        const newVideos = data.items.filter((video: Video) => !existingVideoIds.has(video.id))
        
        if (newVideos.length > 0) {
          finalItems = [...searchResults.items, ...newVideos]
          setSearchResults({
            items: finalItems
          })
          showDynamicConfirmation('search', finalItems.length)
        } else {
          if (data.items.length === 0) {
            // No items returned from continuation - likely reached the end
            showToast('No More Videos', 'You\'ve reached the end of the search results', 'info')
            setHasMoreVideos(false)
          } else {
            // All returned items were duplicates
            showToast('No New Videos', 'All available videos have been loaded', 'info')
          }
          finalItems = searchResults.items
        }
      } else {
        // Replace with new search results
        finalItems = data.items
        setSearchResults(data)
        showDynamicConfirmation('search', finalItems.length)
      }
      
      // Update pagination state
      setContinuationToken(data.continuation)
      setHasMoreVideos(data.hasMore !== false && !!data.continuation)
      
      // Cache the results (only cache initial searches, not pagination)
      if (!append) {
        setCachedResults(queryToUse, finalItems, data.continuation, data.hasMore !== false && !!data.continuation)
      }
      
      console.log('Search state updated:', {
        query: queryToUse,
        isPagination: append,
        totalVideos: finalItems.length,
        newVideosLoaded: append ? data.items.length : 0,
        hasMore: data.hasMore,
        hasContinuation: !!data.continuation,
        page: data.page,
        cached: !append && getCachedResults(queryToUse) !== null
      })
      
    } catch (error) {
      showToast('Search Failed', 'Search failed. Please try again.', 'error')
      console.error('Search error:', error)
      if (!append) setSearchResults(null)
    } finally {
      setLoading(false)
      setLoadingMore(false)
      setDynamicLoadingMessage('')
    }
  }

  const loadMoreVideos = useCallback(async () => {
    if (!hasMoreVideos || loadingMore || loading) {
      console.log('Load more blocked:', { hasMoreVideos, loadingMore, loading })
      return
    }
    
    if (!continuationToken) {
      console.log('No continuation token available')
      setHasMoreVideos(false)
      return
    }
    
    if (!currentSearchQuery.trim()) {
      console.log('No current search query available')
      return
    }
    
    // Check if we have cached continuation data
    const cachedResults = getCachedResults(currentSearchQuery)
    if (cachedResults && cachedResults.continuation === continuationToken && cachedResults.items.length > searchResults?.items.length) {
      console.log('Using cached continuation data')
      const newItems = cachedResults.items.slice(searchResults!.items.length)
      setSearchResults({
        items: [...searchResults!.items, ...newItems]
      })
      setContinuationToken(cachedResults.continuation)
      setHasMoreVideos(cachedResults.hasMore)
      showToast('More Videos Loaded', `Loaded ${newItems.length} cached videos`, 'success')
      return
    }
    
    console.log('Triggering load more videos for query:', currentSearchQuery)
    await handleSearch(true)
  }, [hasMoreVideos, loadingMore, loading, continuationToken, currentSearchQuery, searchResults, getCachedResults])

  // Infinite scroll using Intersection Observer
  useEffect(() => {
    if (activeTab !== 'search') return

    const observer = new IntersectionObserver(
      (entries) => {
        const target = entries[0]
        if (target.isIntersecting && hasMoreVideos && !loadingMore && !loading) {
          console.log('Scroll sentinel detected, loading more videos')
          loadMoreVideos()
        }
      },
      {
        threshold: 0.1,
        rootMargin: '200px' // Increased margin for earlier loading
      }
    )

    const sentinel = document.getElementById('scroll-sentinel')
    if (sentinel) {
      observer.observe(sentinel)
      console.log('Scroll sentinel observer attached')
    }

    return () => {
      if (sentinel) {
        observer.unobserve(sentinel)
        console.log('Scroll sentinel observer detached')
      }
    }
  }, [activeTab, hasMoreVideos, loadingMore, loading, loadMoreVideos])

  const handleVideoPlay = async (video: Video, startTime?: number) => {
    setSelectedVideo(video)
    setActiveTab('player')
    
    // Add to watched videos
    try {
      const thumbnailUrl = getThumbnailUrl(video)
      await fetch('/api/watched', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          videoId: video.id,
          title: video.title,
          channelName: getChannelName(video),
          thumbnail: thumbnailUrl,
          duration: video.duration,
          viewCount: video.viewCount
        })
      })
      await loadWatchedVideos()
    } catch (error) {
      console.error('Failed to add to watched:', error)
      showToast('Tracking Failed', 'Failed to track video', 'error')
    }
  }

  const handleClipPlay = async (note: VideoNote) => {
    if (!note.startTime || !note.endTime) return
    
    // Create video object
    const videoObject = {
      id: note.videoId,
      title: note.title,
      channelName: note.channelName,
      thumbnail: note.thumbnail,
      channel: { name: note.channelName }
    }
    
    // Set selected video with clip info
    setSelectedVideo(videoObject)
    setClipTiming({ startTime: note.startTime, endTime: note.endTime })
    setActiveTab('player')
    
    showToast('Clip Ready', `Clip from ${formatTime(note.startTime)} to ${formatTime(note.endTime)} - Click to play`, 'success')
    
    // Add to watched videos
    try {
      await fetch('/api/watched', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          videoId: note.videoId,
          title: note.title,
          channelName: note.channelName,
          thumbnail: note.thumbnail
        })
      })
      await loadWatchedVideos()
    } catch (error) {
      console.error('Failed to add to watched:', error)
    }
  }

  const toggleFavorite = async (video: Video) => {
    try {
      const isFavorite = favoriteVideoIds.has(video.id)
      const thumbnailUrl = getThumbnailUrl(video)
      
      if (isFavorite) {
        // Remove from favorites
        showDynamicLoading('favorites')
        const response = await fetch(`/api/favorites/${video.id}`, { 
          method: 'DELETE' 
        })
        
        if (response.ok) {
          showDynamicConfirmation('favorites', 'remove')
          // Immediately update the local state to provide instant feedback
          setFavoriteVideos(prev => prev.filter(fav => fav.videoId !== video.id))
          // Then refresh from server to ensure consistency
          await loadFavoriteVideos()
        } else {
          const errorData = await response.json().catch(() => ({}))
          console.error('Delete failed:', errorData)
          showToast('Failed to Remove', errorData.error || 'Failed to remove from favorites', 'error')
        }
      } else {
        // Add to favorites
        showDynamicLoading('favorites')
        const response = await fetch('/api/favorites', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            videoId: video.id,
            title: video.title,
            channelName: getChannelName(video),
            thumbnail: thumbnailUrl,
            duration: video.duration,
            viewCount: video.viewCount
          })
        })
        
        if (response.ok) {
          showDynamicConfirmation('favorites', 'add')
          await loadFavoriteVideos()
        } else {
          const data = await response.json().catch(() => ({}))
          if (data.error === 'Already exists') {
            showToast('Already in Favorites', 'Video already in your favorites', 'info')
            // Sync local state if it was already favorited
            await loadFavoriteVideos()
          } else {
            console.error('Add failed:', data)
            showToast('Failed to Add', data.error || 'Failed to add to favorites', 'error')
          }
        }
      }
    } catch (error) {
      console.error('Favorite toggle error:', error)
      showToast('Error', 'Failed to update favorites', 'error')
    } finally {
      setDynamicLoadingMessage('')
    }
  }

  const toggleFavoriteChannel = async (channel: Channel) => {
    try {
      const response = await fetch('/api/channels', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          channelId: channel.id,
          name: channel.name,
          thumbnail: channel.thumbnail?.url,
          subscriberCount: channel.subscriberCount
        })
      })
      
      if (response.ok) {
        showToast('Channel Added', 'Channel added to favorites', 'success')
        await loadFavoriteChannels()
      } else {
        const data = await response.json()
        if (data.error === 'Already exists') {
          await fetch(`/api/channels/${channel.id}`, { method: 'DELETE' })
          showToast('Channel Removed', 'Channel removed from favorites', 'info')
          await loadFavoriteChannels()
        }
      }
    } catch (error) {
      showToast('Error', 'Failed to update channel favorites', 'error')
      console.error('Channel favorite error:', error)
    }
  }

  const addNote = async () => {
    if (!currentNoteVideo || !currentNote.trim()) {
      showToast('Note Required', 'Please enter a note', 'info')
      return
    }
    
    try {
      const thumbnailUrl = getThumbnailUrl(currentNoteVideo)
      
      if (currentNoteId) {
        // Update existing note
        const response = await fetch(`/api/notes/${currentNoteId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            note: currentNote,
            fontSize: noteFontSize
          })
        })
        
        if (response.ok) {
          showToast('Note Updated', 'Note updated successfully', 'success')
        } else {
          showToast('Update Failed', 'Failed to update note', 'error')
          return
        }
      } else {
        // Create new note
        const response = await fetch('/api/notes', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            videoId: currentNoteVideo.id,
            title: currentNoteVideo.title,
            channelName: getChannelName(currentNoteVideo),
            thumbnail: thumbnailUrl,
            note: currentNote,
            fontSize: noteFontSize
          })
        })
        
        if (response.ok) {
          showToast('Note Added', 'Note added successfully', 'success')
        } else {
          showToast('Add Failed', 'Failed to add note', 'error')
          return
        }
      }
      
      setNoteDialogOpen(false)
      setCurrentNote('')
      setCurrentNoteVideo(null)
      setCurrentNoteId(null)
      await loadVideoNotes()
    } catch (error) {
      showToast('Save Failed', 'Failed to save note', 'error')
      console.error('Save note error:', error)
    }
  }

  const deleteNote = async (noteId: string) => {
    setNoteToDelete(noteId)
    setDeleteConfirmOpen(true)
  }

  const confirmDeleteNote = async () => {
    if (!noteToDelete) return
    
    try {
      showDynamicLoading('notes')
      const response = await fetch(`/api/notes/${noteToDelete}`, {
        method: 'DELETE'
      })
      
      if (response.ok) {
        showDynamicConfirmation('notes', 'delete')
        await loadVideoNotes()
        setDeleteConfirmOpen(false)
        setNoteToDelete(null)
      } else {
        const errorData = await response.json().catch(() => ({}))
        showToast('Delete Failed', errorData.error || 'Failed to delete note', 'error')
      }
    } catch (error) {
      showToast('Error', 'Failed to delete note', 'error')
      console.error('Delete note error:', error)
    } finally {
      setDynamicLoadingMessage('')
    }
  }

  // Clip recording functions
  const startClipRecording = () => {
    if (!selectedVideo) return
    
    // Try to get current time from YouTube iframe
    const iframe = document.querySelector('iframe') as HTMLIFrameElement
    if (iframe && iframe.contentWindow) {
      // Post message to YouTube iframe to get current time
      iframe.contentWindow.postMessage('{"event":"command","func":"getCurrentTime","args":""}', '*')
      
      // Listen for the response
      const handleMessage = (event: MessageEvent) => {
        if (event.data && typeof event.data === 'number') {
          setClipStartTime(Math.floor(event.data))
          setIsRecording(true)
          showToast('Recording Started', `Clip started at ${formatTime(Math.floor(event.data))}`, 'success')
          window.removeEventListener('message', handleMessage)
        }
      }
      
      window.addEventListener('message', handleMessage)
      
      // Fallback: use 0 as start time if we can't get current time
      setTimeout(() => {
        if (!isRecording) {
          setClipStartTime(0)
          setIsRecording(true)
          showToast('Recording Started', 'Clip recording started from beginning', 'success')
          window.removeEventListener('message', handleMessage)
        }
      }, 1000)
    } else {
      // Fallback if iframe not available
      setClipStartTime(0)
      setIsRecording(true)
      showToast('Recording Started', 'Clip recording started', 'success')
    }
  }

  const stopClipRecording = () => {
    if (!selectedVideo || !isRecording) return
    
    const iframe = document.querySelector('iframe') as HTMLIFrameElement
    if (iframe && iframe.contentWindow) {
      // Post message to YouTube iframe to get current time
      iframe.contentWindow.postMessage('{"event":"command","func":"getCurrentTime","args":""}', '*')
      
      // Listen for the response
      const handleMessage = (event: MessageEvent) => {
        if (event.data && typeof event.data === 'number') {
          const endTime = Math.floor(event.data)
          setClipEndTime(endTime)
          setIsRecording(false)
          setClipDialogOpen(true)
          showToast('Recording Stopped', `Clip stopped at ${formatTime(endTime)}`, 'success')
          window.removeEventListener('message', handleMessage)
        }
      }
      
      window.addEventListener('message', handleMessage)
      
      // Fallback: use estimated time if we can't get current time
      setTimeout(() => {
        if (isRecording) {
          const estimatedTime = clipStartTime ? clipStartTime + 30 : 30 // Default 30 seconds
          setClipEndTime(estimatedTime)
          setIsRecording(false)
          setClipDialogOpen(true)
          showToast('Recording Stopped', 'Clip recording stopped', 'success')
          window.removeEventListener('message', handleMessage)
        }
      }, 1000)
    } else {
      // Fallback if iframe not available
      const estimatedTime = clipStartTime ? clipStartTime + 30 : 30
      setClipEndTime(estimatedTime)
      setIsRecording(false)
      setClipDialogOpen(true)
      showToast('Recording Stopped', 'Clip recording stopped', 'success')
    }
  }

  const setManualStartTime = (time: number) => {
    setClipStartTime(time)
    if (!isRecording) {
      setIsRecording(true)
      showToast('Recording Started', `Clip started at ${formatTime(time)}`, 'success')
    }
  }

  const setManualEndTime = (time: number) => {
    setClipEndTime(time)
    if (isRecording) {
      setIsRecording(false)
      setClipDialogOpen(true)
      showToast('Recording Stopped', `Clip stopped at ${formatTime(time)}`, 'success')
    }
  }

  const saveClipNote = async () => {
    if (!selectedVideo || clipStartTime === null || clipEndTime === null) return
    
    try {
      const response = await fetch('/api/notes', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          videoId: selectedVideo.id,
          title: selectedVideo.title,
          channelName: getChannelName(selectedVideo),
          thumbnail: getThumbnailUrl(selectedVideo),
          note: clipNote || `Clip from ${formatTime(clipStartTime)} to ${formatTime(clipEndTime)}`,
          startTime: clipStartTime,
          endTime: clipEndTime,
          isClip: true
        })
      })
      
      if (response.ok) {
        showToast('Clip Saved', 'Video clip saved successfully', 'success')
        setClipDialogOpen(false)
        setClipNote('')
        setClipStartTime(null)
        setClipEndTime(null)
        await loadVideoNotes()
      } else {
        showToast('Save Failed', 'Failed to save clip', 'error')
      }
    } catch (error) {
      showToast('Error', 'Failed to save clip', 'error')
      console.error('Save clip error:', error)
    }
  }

  const formatTime = (seconds: number): string => {
    const hours = Math.floor(seconds / 3600)
    const minutes = Math.floor((seconds % 3600) / 60)
    const secs = seconds % 60
    
    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
    }
    return `${minutes}:${secs.toString().padStart(2, '0')}`
  }

  const editNote = (note: VideoNote) => {
    setCurrentNoteVideo({
      id: note.videoId,
      title: note.title,
      channelName: note.channelName,
      thumbnail: note.thumbnail,
      channel: { name: note.channelName }
    } as any)
    setCurrentNote(note.note)
    setCurrentNoteId(note.id)
    setNoteFontSize(note.fontSize)
    setNoteDialogOpen(true)
  }

  const loadWatchedVideos = async (): Promise<void> => {
    try {
      const response = await fetch('/api/watched')
      if (!response.ok) throw new Error('Failed to fetch watched videos')
      const data = await response.json()
      setWatchedVideos(data || [])
    } catch (error) {
      console.error('Failed to load watched videos:', error)
      setWatchedVideos([])
    }
  }

  const loadFavoriteChannels = async (): Promise<void> => {
    try {
      const response = await fetch('/api/channels')
      if (!response.ok) throw new Error('Failed to fetch favorite channels')
      const data = await response.json()
      setFavoriteChannels(data || [])
    } catch (error) {
      console.error('Failed to load favorite channels:', error)
      setFavoriteChannels([])
    }
  }

  const loadFavoriteVideos = async (): Promise<void> => {
    try {
      const response = await fetch('/api/favorites')
      if (!response.ok) throw new Error('Failed to fetch favorite videos')
      const data = await response.json()
      setFavoriteVideos(data || [])
    } catch (error) {
      console.error('Failed to load favorite videos:', error)
      setFavoriteVideos([])
    }
  }

  // Channel search function
  const handleChannelSearch = async (): Promise<void> => {
    const trimmedQuery = searchQuery.trim()
    if (!trimmedQuery) {
      showToast('Search Query Required', 'Please enter a search query', 'info')
      return
    }

    setChannelSearchLoading(true)
    try {
      const response = await fetch(`/api/youtube/search-channels?query=${encodeURIComponent(trimmedQuery)}`)
      if (!response.ok) throw new Error('Failed to search channels')
      const data = await response.json()
      
      if (data.error) {
        showToast('Search Error', data.error, 'error')
        setChannelSearchResults([])
        return
      }
      
      setChannelSearchResults(data.items || [])
      showToast('Channel Search', `Found ${data.items?.length || 0} channels`, 'success')
    } catch (error) {
      console.error('Failed to search channels:', error)
      showToast('Search Error', 'Failed to search channels', 'error')
      setChannelSearchResults([])
    } finally {
      setChannelSearchLoading(false)
    }
  }

  // Load videos from followed channels
  const loadChannelVideos = async (): Promise<void> => {
    if (favoriteChannels.length === 0) {
      setChannelVideos([])
      return
    }

    setChannelVideosLoading(true)
    try {
      const response = await fetch('/api/channels/videos')
      if (!response.ok) throw new Error('Failed to fetch channel videos')
      const data = await response.json()
      
      if (data.error) {
        showToast('Error', data.error, 'error')
        setChannelVideos([])
        return
      }
      
      setChannelVideos(data.items || [])
    } catch (error) {
      console.error('Failed to load channel videos:', error)
      showToast('Error', 'Failed to load channel videos', 'error')
      setChannelVideos([])
    } finally {
      setChannelVideosLoading(false)
    }
  }

  // Clear watched history
  const clearWatchedHistory = async (): Promise<void> => {
    try {
      const response = await fetch('/api/watched/clear', { method: 'POST' })
      if (!response.ok) throw new Error('Failed to clear watched history')
      
      setWatchedVideos([])
      showToast('Success', 'Watched history cleared', 'success')
    } catch (error) {
      console.error('Failed to clear watched history:', error)
      showToast('Error', 'Failed to clear watched history', 'error')
    }
  }

  // Follow/Unfollow channel
  const toggleFollowChannel = async (channel: any): Promise<void> => {
    try {
      // Validate channel data before sending
      if (!channel || (!channel.channelId && !channel.id) || !channel.name) {
        showToast('Invalid Channel', 'Channel information is incomplete', 'error')
        return
      }

      const payload = {
        channelId: channel.channelId || channel.id,
        name: channel.name,
        thumbnail: channel.thumbnail || null,
        subscriberCount: channel.subscriberCount || 0
      }

      console.log('Following channel with payload:', payload)

      const response = await fetch('/api/channels', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      })

      const responseData = await response.json()
      console.log('Follow channel response:', { status: response.status, data: responseData })

      if (response.ok) {
        await loadFavoriteChannels()
        showToast('Success', `Now following ${channel.name}`, 'success')
        // Remove from search results if following
        setChannelSearchResults(prev => prev.filter(c => c.id !== channel.id))
      } else if (response.status === 409) {
        showToast('Already Following', 'You are already following this channel', 'info')
        // Remove from search results anyway since it's already followed
        setChannelSearchResults(prev => prev.filter(c => c.id !== channel.id))
      } else {
        console.error('Follow channel failed:', responseData)
        showToast('Error', responseData.error || 'Failed to follow channel', 'error')
      }
    } catch (error) {
      console.error('Failed to follow channel:', error)
      showToast('Error', 'Network error while following channel', 'error')
    }
  }

  // Unfollow channel
  const unfollowChannel = async (channelId: string): Promise<void> => {
    try {
      if (!channelId) {
        showToast('Invalid Channel', 'Channel ID is required', 'error')
        return
      }

      console.log('Unfollowing channel:', { channelId })

      const response = await fetch(`/api/channels/${channelId}`, { method: 'DELETE' })
      
      if (response.ok) {
        await loadFavoriteChannels()
        await loadChannelVideos() // Refresh channel videos
        showToast('Success', 'Channel unfollowed', 'success')
      } else {
        const errorData = await response.json()
        console.error('Unfollow channel failed:', errorData)
        showToast('Error', errorData.error || 'Failed to unfollow channel', 'error')
      }
    } catch (error) {
      console.error('Failed to unfollow channel:', error)
      showToast('Error', 'Network error while unfollowing channel', 'error')
    }
  }

  const toggleItemSelection = useCallback((itemId: string) => {
    setSelectedItems(prev => {
      const newSelected = new Set(prev)
      if (newSelected.has(itemId)) {
        newSelected.delete(itemId)
      } else {
        newSelected.add(itemId)
      }
      return newSelected
    })
  }, [])

  const clearSelection = useCallback(() => {
    setSelectedItems(new Set())
    setMultiSelectMode(false)
  }, [])

  // Memoized computed values
  const favoriteVideoIds = useMemo(() => 
    new Set(favoriteVideos.map(fav => fav.videoId)), 
    [favoriteVideos]
  )

  const hasFavorites = useMemo(() => 
    favoriteVideos.length > 0 || favoriteChannels.length > 0,
    [favoriteVideos, favoriteChannels]
  )

  const tabs = useMemo(() => [
    { id: 'home' as Tab, icon: Home, label: 'Home' },
    { id: 'search' as Tab, icon: Search, label: 'Search' },
    { id: 'player' as Tab, icon: Play, label: 'Player' },
    { id: 'watched' as Tab, icon: Clock, label: 'Watched' },
    { id: 'channels' as Tab, icon: User, label: 'Channels' },
    { id: 'favorites' as Tab, icon: Heart, label: 'Favorites' },
  ], [])

  // Clear selection when switching tabs
  useEffect(() => {
    if (multiSelectMode) {
      clearSelection()
    }
  }, [activeTab, multiSelectMode, clearSelection])

  const VideoCard = useCallback(({ video, showActions = true }: { video: Video | any, showActions?: boolean }) => {
    const isFavorite = favoriteVideoIds.has(video.id)
    const isSelected = selectedItems.has(video.id)
    const thumbnailUrl = getThumbnailUrl(video)
    const channelName = getChannelName(video)
    
    return (
      <Card className={`group relative overflow-hidden hover:shadow-xl transition-all duration-300 hover:scale-[1.02] border-border/50 hover:border-primary/30 ${
        isSelected ? 'ring-2 ring-primary ring-offset-2 ring-offset-background' : ''
      }`}>
        <CardContent className="p-4">
          <div className="flex gap-4">
            {multiSelectMode && (
              <div className="flex items-start pt-1">
                <Checkbox
                  checked={isSelected}
                  onCheckedChange={() => toggleItemSelection(video.id)}
                  className="mt-1 data-[state=checked]:bg-primary data-[state=checked]:border-primary"
                  aria-label={`Select video: ${video.title}`}
                />
              </div>
            )}
            <div className="relative flex-shrink-0">
              <div className="relative overflow-hidden rounded-xl">
                <img
                  src={thumbnailUrl}
                  alt={video.title}
                  className="w-40 h-28 object-cover transition-transform duration-300 group-hover:scale-105 bg-muted"
                  onError={(e) => {
                    e.currentTarget.src = 'https://www.youtube.com/img/desktop/yt_1200.png'
                  }}
                  loading="lazy"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                {video.duration && (
                  <Badge className="absolute bottom-2 right-2 text-xs bg-black/80 text-white border-none backdrop-blur-sm" aria-label={`Duration: ${formatDuration(video.duration)}`}>
                    {formatDuration(video.duration)}
                  </Badge>
                )}
                {hasNotes && (
                  <div 
                    className="absolute top-2 right-2 bg-blue-600 text-white rounded-full p-1.5 cursor-pointer hover:bg-blue-700 transition-all duration-200 hover:scale-110 shadow-lg" 
                    aria-label={`${notesCount} note${notesCount > 1 ? 's' : ''} - Click to view notes`}
                    onClick={() => {
                      setActiveTab('notes')
                      showToast('Notes Tab', `Viewing ${notesCount} note${notesCount > 1 ? 's' : ''} for "${video.title}"`, 'info')
                    }}
                  >
                    <FileText className="w-3 h-3" />
                  </div>
                )}
              </div>
            </div>
            <div className="flex-1 min-w-0 space-y-2">
              <div>
                <h3 className="font-semibold text-sm line-clamp-2 mb-1 group-hover:text-primary transition-colors" id={`video-title-${video.id}`}>
                  {video.title}
                </h3>
                <p className="text-xs text-muted-foreground flex items-center gap-1">
                  <span className="w-1.5 h-1 bg-primary rounded-full"></span>
                  {channelName}
                </p>
              </div>
              <div className="flex items-center gap-3 text-xs text-muted-foreground">
                {video.viewCount && (
                  <span className="flex items-center gap-1" aria-label={`${video.viewCount} views`}>
                    <span className="w-1 h-1 bg-muted-foreground rounded-full"></span>
                    {formatViewCount(video.viewCount)}
                  </span>
                )}
                {video.publishedAt && (
                  <span className="flex items-center gap-1" aria-label={`Published ${formatPublishedAt(video.publishedAt)}`}>
                    <span className="w-1 h-1 bg-muted-foreground rounded-full"></span>
                    {formatPublishedAt(video.publishedAt)}
                  </span>
                )}
                {hasNotes && (
                  <span className="flex items-center gap-1 text-blue-600 font-medium" aria-label={`${notesCount} note${notesCount > 1 ? 's' : ''}`}>
                    <FileText className="w-3 h-3" />
                    {notesCount} note{notesCount > 1 ? 's' : ''}
                  </span>
                )}
              </div>
              
              {/* Show notes preview if available */}
              {hasNotes && videoNotesList.length > 0 && (
                <div 
                  className="mt-3 p-3 bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-950/30 dark:to-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800 cursor-pointer hover:from-blue-100 hover:to-blue-200 dark:hover:from-blue-950/40 dark:hover:to-blue-900/30 transition-all duration-200 group"
                  onClick={() => {
                    setActiveTab('notes')
                    showToast('Notes Tab', `Viewing ${notesCount} note${notesCount > 1 ? 's' : ''} for "${video.title}"`, 'info')
                  }}
                >
                  <div className="flex items-center gap-2 mb-2">
                    <FileText className="w-3 h-3 text-blue-600" />
                    <span className="text-xs font-semibold text-blue-700 dark:text-blue-300">
                      {notesCount} note{notesCount > 1 ? 's' : ''}
                    </span>
                  </div>
                  <p className="text-xs text-gray-700 dark:text-gray-300 line-clamp-2 leading-relaxed">
                    {videoNotesList[0].note.length > 80 
                      ? `${videoNotesList[0].note.substring(0, 80)}...` 
                      : videoNotesList[0].note}
                  </p>
                  {notesCount > 1 && (
                    <p className="text-xs text-blue-600 dark:text-blue-400 mt-2 font-medium">
                      +{notesCount - 1} more note{notesCount > 2 ? 's' : ''}
                    </p>
                  )}
                </div>
              )}
              
              {showActions && (
                <div className="flex gap-2 mt-3" role="group" aria-label="Video actions">
                  <Button
                    size="sm"
                    onClick={() => handleVideoPlay(video)}
                    className="h-8 px-3 bg-primary hover:bg-primary/90 text-primary-foreground shadow-md hover:shadow-lg transition-all duration-200 hover:scale-105"
                    aria-label={`Play video: ${video.title}`}
                  >
                    <Play className="w-3 h-3 mr-1.5" />
                    Play
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => toggleFavorite(video)}
                    className={`h-8 px-3 transition-all duration-200 hover:scale-105 ${
                      isFavorite 
                        ? 'text-red-500 hover:text-red-600 bg-red-50 border-red-200 hover:bg-red-100 shadow-sm' 
                        : 'hover:bg-accent hover:border-primary/50'
                    }`}
                    aria-label={`${isFavorite ? 'Remove from' : 'Add to'} favorites: ${video.title}`}
                  >
                    <Heart className={`w-3 h-3 transition-colors ${isFavorite ? 'fill-current' : ''}`} />
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => {
                      setCurrentNoteVideo(video)
                      setNoteDialogOpen(true)
                    }}
                    className="h-8 px-3 hover:bg-blue-50 hover:border-blue-200 hover:text-blue-600 transition-all duration-200 hover:scale-105"
                    aria-label={`Add note for: ${video.title}`}
                  >
                    <FileText className="w-3 h-3" />
                  </Button>
                </div>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    )
  }, [favoriteVideoIds, selectedItems, multiSelectMode, getThumbnailUrl, getChannelName, toggleItemSelection, handleVideoPlay, toggleFavorite, hasVideoNotes, getVideoNotesCount, getVideoNotes])

  const renderTabContent = () => {
    switch (activeTab) {
      case 'home':
        return (
          <div className="space-y-8">
            {/* Header Section */}
            <div className="bg-gradient-to-r from-primary/10 via-primary/5 to-transparent rounded-2xl p-6 border border-primary/20">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent mb-2">
                    Welcome to MyTube
                  </h2>
                  <p className="text-muted-foreground">Your personalized YouTube experience</p>
                </div>
                <div className="flex gap-2">
                  <Button
                    size="sm"
                    variant={multiSelectMode ? "default" : "outline"}
                    onClick={() => setMultiSelectMode(!multiSelectMode)}
                    className="hover:scale-105 transition-transform duration-200"
                  >
                    {multiSelectMode ? <Check className="w-4 h-4 mr-2" /> : <div className="w-4 h-4 border border-current rounded mr-2" />}
                    {multiSelectMode ? 'Selecting' : 'Select'}
                  </Button>
                  {multiSelectMode && selectedItems.size > 0 && (
                    <Button size="sm" onClick={clearSelection} className="hover:scale-105 transition-transform duration-200">
                      Clear ({selectedItems.size})
                    </Button>
                  )}
                </div>
              </div>
            </div>
            
            {/* Videos from Followed Channels */}
            {channelVideos.length > 0 && (
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
                  <h3 className="text-xl font-semibold">Recent from Followed Channels</h3>
                  <Badge variant="secondary" className="bg-primary/10 text-primary border-primary/20">
                    {channelVideos.length} videos
                  </Badge>
                </div>
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {channelVideos.map(video => (
                    <Card key={video.id} className="group hover:shadow-xl transition-all duration-300 hover:scale-[1.02] border-border/50 hover:border-primary/30 overflow-hidden">
                      <CardContent className="p-4">
                        <div className="space-y-4">
                          {/* Video Thumbnail */}
                          <div className="relative overflow-hidden rounded-xl">
                            <img
                              src={video.thumbnail}
                              alt={video.title}
                              className="w-full h-40 object-cover transition-transform duration-300 group-hover:scale-105 bg-muted"
                            />
                            <div className="absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                            {video.duration && (
                              <Badge className="absolute bottom-2 right-2 text-xs bg-black/80 text-white border-none backdrop-blur-sm">
                                {video.duration}
                              </Badge>
                            )}
                          </div>
                          
                          {/* Video Info */}
                          <div className="space-y-2">
                            <h4 className="font-semibold text-sm line-clamp-2 group-hover:text-primary transition-colors">
                              {video.title}
                            </h4>
                            <div className="flex items-center gap-2 text-xs text-muted-foreground">
                              {video.channelThumbnail && (
                                <img
                                  src={video.channelThumbnail}
                                  alt={video.channelName}
                                  className="w-4 h-4 rounded-full"
                                />
                              )}
                              <span>{video.channelName}</span>
                            </div>
                            <div className="flex items-center justify-between text-xs text-muted-foreground">
                              <div className="flex items-center gap-2">
                                {video.viewCount && (
                                  <span>{formatViewCount(video.viewCount)}</span>
                                )}
                              </div>
                              {video.duration && (
                                <span>{video.duration}</span>
                              )}
                            </div>
                          </div>
                          
                          {/* Actions */}
                          <div className="flex gap-2 pt-2 border-t border-border/50">
                            <Button
                              size="sm"
                              onClick={() => {
                                setSelectedVideo(video)
                                setClipTiming(null) // Clear any existing clip timing
                                setActiveTab('player')
                              }}
                              className="flex-1 h-8 bg-primary hover:bg-primary/90 text-primary-foreground shadow-md hover:shadow-lg transition-all duration-200 hover:scale-105"
                            >
                              <Play className="w-3 h-3 mr-1.5" />
                              Play
                            </Button>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => unfollowChannel(video.channelId)}
                              className="h-8 px-3 text-red-500 hover:text-red-600 hover:bg-red-50 border-red-200 hover:border-red-300 transition-all duration-200 hover:scale-105"
                            >
                              <Heart className="w-3 h-3 mr-1" />
                              Unfollow
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            )}
            
            {/* Favorite Videos */}
            {favoriteVideos.length > 0 && (
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                  <h3 className="text-xl font-semibold">Favorite Videos</h3>
                  <Badge variant="secondary" className="bg-red-50 text-red-600 border-red-200">
                    {favoriteVideos.length} videos
                  </Badge>
                </div>
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {favoriteVideos.map(video => (
                    <VideoCard key={video.id} video={video} />
                  ))}
                </div>
              </div>
            )}
            
            {/* Followed Channels */}
            {favoriteChannels.length > 0 && (
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                  <h3 className="text-xl font-semibold">Followed Channels</h3>
                  <Badge variant="secondary" className="bg-blue-50 text-blue-600 border-blue-200">
                    {favoriteChannels.length} channels
                  </Badge>
                </div>
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {favoriteChannels.map(channel => (
                    <Card key={channel.id} className="group hover:shadow-xl transition-all duration-300 hover:scale-[1.02] border-border/50 hover:border-primary/30">
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <div className="relative">
                              <img
                                src={getChannelThumbnailUrl(channel)}
                                alt={channel.name}
                                className="w-12 h-12 rounded-full object-cover bg-muted border-2 border-border group-hover:border-primary transition-colors"
                                onError={(e) => {
                                  e.currentTarget.src = 'https://www.youtube.com/img/desktop/yt_1200.png'
                                }}
                              />
                              <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-primary rounded-full flex items-center justify-center">
                                <User className="w-2 h-2 text-primary-foreground" />
                              </div>
                            </div>
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-semibold truncate group-hover:text-primary transition-colors">{channel.name}</p>
                              {channel.subscriberCount && (
                                <p className="text-xs text-muted-foreground">
                                  {formatViewCount(channel.subscriberCount)} subscribers
                                </p>
                              )}
                            </div>
                          </div>
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => unfollowChannel(channel.channelId)}
                            className="h-8 px-3 text-red-500 hover:text-red-600 hover:bg-red-50 transition-all duration-200 hover:scale-105"
                          >
                            <Heart className="w-3 h-3 mr-1" />
                            Unfollow
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            )}
            
            {/* Empty State */}
            {channelVideos.length === 0 && favoriteVideos.length === 0 && favoriteChannels.length === 0 && (
              <div className="text-center py-16">
                <div className="relative inline-block mb-6">
                  <div className="absolute inset-0 bg-primary/20 blur-3xl rounded-full"></div>
                  <Heart className="w-20 h-20 text-muted-foreground relative" />
                </div>
                <h3 className="text-2xl font-bold mb-3">No Favorites Yet</h3>
                <p className="text-muted-foreground mb-6 max-w-md mx-auto">
                  Start exploring and add your favorite videos and channels to see them here!
                </p>
                <div className="flex gap-3 justify-center">
                  <Button onClick={() => setActiveTab('channels')} className="hover:scale-105 transition-transform duration-200">
                    <Users className="w-4 h-4 mr-2" />
                    Discover Channels
                  </Button>
                  <Button onClick={() => setActiveTab('search')} variant="outline" className="hover:scale-105 transition-transform duration-200">
                    <Search className="w-4 h-4 mr-2" />
                    Search Videos
                  </Button>
                </div>
              </div>
            )}
          </div>
        )

      case 'search':
        return (
          <div className="space-y-6">
            {/* Search Header */}
            <div className="bg-gradient-to-r from-primary/10 via-primary/5 to-transparent rounded-2xl p-6 border border-primary/20">
              <h2 className="text-2xl font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent mb-4">
                Discover Videos
              </h2>
              <div className="flex gap-3">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                  <Input
                    placeholder="Search YouTube videos..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && !loading && handleSearch()}
                    className="pl-10 h-12 border-border/50 focus:border-primary transition-all duration-200"
                    disabled={loading}
                  />
                </div>
                <Button 
                  onClick={handleSearch} 
                  disabled={loading || !searchQuery.trim()}
                  className="h-12 px-6 bg-primary hover:bg-primary/90 text-primary-foreground shadow-md hover:shadow-lg transition-all duration-200 hover:scale-105"
                >
                  {loading ? (
                    <Loader2 className="w-5 h-5 animate-spin" />
                  ) : (
                    <Search className="w-5 h-5" />
                  )}
                </Button>
              </div>
            </div>
            
            {/* Loading State */}
            {loading && (
              <div className="space-y-4">
                <div className="flex items-center gap-3 text-muted-foreground">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Searching for videos...</span>
                </div>
                <VideoGridSkeleton count={8} />
              </div>
            )}
            
            {/* Search Results */}
            {searchResults && (
              <div className="space-y-6">
                {searchResults.error ? (
                  <div className="text-center py-16">
                    <div className="relative inline-block mb-6">
                      <div className="absolute inset-0 bg-red-500/20 blur-3xl rounded-full"></div>
                      <Search className="w-20 h-20 text-red-500 relative" />
                    </div>
                    <h3 className="text-xl font-semibold text-red-600 mb-2">Search Error</h3>
                    <p className="text-muted-foreground max-w-md mx-auto">{searchResults.error}</p>
                    <Button 
                      onClick={() => handleSearch()} 
                      className="mt-4 hover:scale-105 transition-transform duration-200"
                    >
                      Try Again
                    </Button>
                  </div>
                ) : searchResults.items.length === 0 ? (
                  <div className="text-center py-16">
                    <div className="relative inline-block mb-6">
                      <div className="absolute inset-0 bg-primary/20 blur-3xl rounded-full"></div>
                      <Search className="w-20 h-20 text-muted-foreground relative" />
                    </div>
                    <h3 className="text-xl font-semibold mb-2">No Videos Found</h3>
                    <p className="text-muted-foreground mb-4">No videos found for "{searchQuery}"</p>
                    <p className="text-sm text-muted-foreground mb-6">Try different keywords or check spelling</p>
                    <div className="flex gap-3 justify-center">
                      <Button 
                        onClick={() => setSearchQuery('')}
                        variant="outline"
                        className="hover:scale-105 transition-transform duration-200"
                      >
                        Clear Search
                      </Button>
                      <Button 
                        onClick={() => handleSearch()}
                        className="hover:scale-105 transition-transform duration-200"
                      >
                        Try Again
                      </Button>
                    </div>
                  </div>
                ) : (
                  <>
                    {/* Dynamic Loading Message */}
                    {dynamicLoadingMessage && (
                      <div className="mb-6 p-4 bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-950/30 dark:to-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-xl animate-in fade-in duration-300">
                        <div className="flex items-center gap-3">
                          <Loader2 className="w-5 h-5 text-blue-600 animate-spin" />
                          <span className="text-sm text-blue-700 dark:text-blue-300 font-medium">
                            {dynamicLoadingMessage}
                          </span>
                        </div>
                      </div>
                    )}
                    
                    {/* Results Header */}
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                        <h3 className="text-xl font-semibold">Search Results</h3>
                        <Badge variant="secondary" className="bg-green-50 text-green-600 border-green-200">
                          {searchResults.items.length} videos
                        </Badge>
                      </div>
                      {hasMoreVideos && (
                        <Badge variant="outline" className="text-xs">
                          Scroll for more
                        </Badge>
                      )}
                    </div>
                    
                    {/* Video Grid */}
                    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                      {searchResults.items.map((video: Video) => (
                        <VideoCard key={video.id} video={video} />
                      ))}
                    </div>
                    
                    {/* Infinite Scroll Sentinel */}
                    <div id="scroll-sentinel" className="py-12 min-h-[100px] flex items-center justify-center">
                      {loadingMore && (
                        <div className="flex flex-col justify-center items-center gap-4 text-muted-foreground animate-in fade-in duration-300">
                          <Loader2 className="w-10 h-10 animate-spin" />
                          <span className="text-sm font-medium">Loading more videos...</span>
                          <div className="flex gap-2">
                            <div className="w-3 h-3 bg-primary/40 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                            <div className="w-3 h-3 bg-primary/40 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                            <div className="w-3 h-3 bg-primary/40 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                          </div>
                        </div>
                      )}
                      {!hasMoreVideos && searchResults.items.length > 0 && (
                        <div className="text-center text-muted-foreground py-8 animate-in fade-in duration-300">
                          <div className="mb-6">
                            <div className="w-20 h-20 mx-auto border-2 border-muted-foreground/20 rounded-full flex items-center justify-center">
                              <Check className="w-8 h-8 text-muted-foreground/40" />
                            </div>
                          </div>
                          <h4 className="text-lg font-semibold mb-2">You've reached the end</h4>
                          <p className="text-sm opacity-75 mb-4">Try a different search query to find more videos</p>
                          <Button 
                            onClick={() => setSearchQuery('')}
                            variant="outline"
                            className="hover:scale-105 transition-transform duration-200"
                          >
                            New Search
                          </Button>
                        </div>
                      )}
                      {hasMoreVideos && !loadingMore && (
                        <div className="text-center text-muted-foreground/50 text-xs py-4">
                          <p>Scroll down to load more videos</p>
                          <div className="mt-2 animate-bounce">
                            <svg className="w-5 h-5 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                            </svg>
                          </div>
                        </div>
                      )}
                    </div>
                  </>
                )}
              </div>
            )}
            
            {/* Initial State */}
            {!searchResults && !loading && (
              <div className="text-center py-16">
                <div className="relative inline-block mb-6">
                  <div className="absolute inset-0 bg-primary/20 blur-3xl rounded-full"></div>
                  <Search className="w-20 h-20 text-muted-foreground relative" />
                </div>
                <h3 className="text-xl font-semibold mb-2">Search YouTube Videos</h3>
                <p className="text-muted-foreground mb-6 max-w-md mx-auto">
                  Enter keywords above to discover amazing content from YouTube
                </p>
                <div className="flex flex-col gap-3 max-w-xs mx-auto">
                  <div className="text-left p-3 bg-muted/50 rounded-lg">
                    <p className="text-sm font-medium mb-1">💡 Pro tip:</p>
                    <p className="text-xs text-muted-foreground">Try searching for topics, creators, or specific keywords</p>
                  </div>
                  <div className="text-left p-3 bg-muted/50 rounded-lg">
                    <p className="text-sm font-medium mb-1">🔍 Popular searches:</p>
                    <div className="flex flex-wrap gap-1 mt-2">
                      {['music', 'tech', 'gaming', 'education'].map(term => (
                        <Button
                          key={term}
                          size="sm"
                          variant="outline"
                          onClick={() => {
                            setSearchQuery(term)
                            handleSearch()
                          }}
                          className="text-xs h-6 hover:scale-105 transition-transform duration-200"
                        >
                          {term}
                        </Button>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )

      case 'player':
        return (
          <div className="space-y-6">
            {selectedVideo ? (
              <>
                {/* Video Player */}
                <div className="bg-gradient-to-r from-purple-10 via-purple-5 to-transparent rounded-2xl p-4 sm:p-6 border border-purple-20">
                  <h2 className="text-xl sm:text-2xl font-bold bg-gradient-to-r from-purple-600 to-purple-400 bg-clip-text text-transparent mb-3 sm:mb-4">
                    Now Playing
                  </h2>
                  <div className="relative w-full aspect-video bg-black rounded-xl overflow-hidden shadow-2xl">
                    <iframe
                      id="youtube-player"
                      src={`https://www.youtube.com/embed/${selectedVideo.id}?enablejsapi=1&origin=${typeof window !== 'undefined' ? window.location.origin : ''}`}
                      className="w-full h-full absolute inset-0"
                      allowFullScreen
                      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    />
                  </div>
                </div>
                
                {/* Video Info */}
                <div className="bg-card rounded-xl p-4 sm:p-6 border border-border/50 shadow-lg">
                  <h3 className="text-lg sm:text-xl font-semibold mb-2 sm:mb-3 line-clamp-2">{selectedVideo.title}</h3>
                  <div className="flex flex-wrap items-center gap-2 sm:gap-4 text-xs sm:text-sm text-muted-foreground mb-3 sm:mb-4">
                    <span className="flex items-center gap-1">
                      <span className="w-1.5 h-1 bg-purple-400 rounded-full"></span>
                      {getChannelName(selectedVideo)}
                    </span>
                    {selectedVideo.viewCount && (
                      <span>{formatViewCount(selectedVideo.viewCount)} views</span>
                    )}
                    {selectedVideo.publishedAt && (
                      <span>{formatPublishedAt(selectedVideo.publishedAt)}</span>
                    )}
                  </div>
                  <div className="flex flex-wrap gap-2 sm:gap-3">
                    <Button
                      onClick={() => toggleFavorite(selectedVideo)}
                      variant={favoriteVideoIds.has(selectedVideo.id) ? "default" : "outline"}
                      className={`hover:scale-105 transition-transform duration-200 text-sm sm:text-base ${
                        favoriteVideoIds.has(selectedVideo.id) 
                          ? "bg-red-500 hover:bg-red-600 text-white shadow-md" 
                          : "hover:border-red-300 hover:bg-red-50"
                      }`}
                    >
                      <Heart className={`w-4 h-4 sm:w-4 sm:h-4 mr-1 sm:mr-2 ${favoriteVideoIds.has(selectedVideo.id) ? 'fill-current' : ''}`} />
                      <span className="hidden sm:inline">{favoriteVideoIds.has(selectedVideo.id) ? 'Favorited' : 'Add to Favorites'}</span>
                      <span className="sm:hidden">{favoriteVideoIds.has(selectedVideo.id) ? '♥' : '♡'}</span>
                    </Button>
                    <Button
                      onClick={() => {
                        setCurrentNoteVideo(selectedVideo)
                        setNoteDialogOpen(true)
                      }}
                      variant="outline"
                      className="hover:scale-105 transition-transform duration-200 hover:bg-blue-50 hover:border-blue-300 text-sm sm:text-base"
                    >
                      <FileText className="w-4 h-4 sm:w-4 sm:h-4 mr-1 sm:mr-2" />
                      <span className="hidden sm:inline">Add Note</span>
                      <span className="sm:hidden">+</span>
                    </Button>
                  </div>
                </div>

                {/* Clip Recording Section */}
                <div className="bg-gradient-to-r from-orange-10 via-orange-5 to-transparent rounded-xl p-3 sm:p-4 border border-orange-20">
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="text-base sm:text-lg font-semibold flex items-center gap-2">
                      <Scissors className="w-4 h-4 text-orange-600" />
                      <span className="hidden sm:inline">Clip Recording</span>
                      <span className="sm:hidden">Clips</span>
                    </h3>
                    {isRecording && (
                      <div className="flex items-center gap-2">
                        <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                        <span className="text-xs sm:text-sm text-red-600 font-medium hidden sm:inline">Recording...</span>
                        <span className="text-xs text-red-600 font-medium sm:hidden">●</span>
                      </div>
                    )}
                  </div>
                  
                  <div className="space-y-3">
                    {/* Recording Controls */}
                    <div className="flex flex-col sm:flex-row sm:items-center gap-3">
                      {!isRecording ? (
                        <Button
                          onClick={startClipRecording}
                          className="bg-orange-500 hover:bg-orange-600 text-white hover:scale-105 transition-transform duration-200 w-full sm:w-auto text-sm sm:text-base"
                        >
                          <Play className="w-4 h-4 mr-2" />
                          Start Clip
                        </Button>
                      ) : (
                        <Button
                          onClick={stopClipRecording}
                          className="bg-red-500 hover:bg-red-600 text-white hover:scale-105 transition-transform duration-200 w-full sm:w-auto text-sm sm:text-base"
                        >
                          <Square className="w-4 h-4 mr-2" />
                          Stop Clip
                        </Button>
                      )}
                      
                      {clipStartTime !== null && (
                        <div className="flex items-center gap-2 text-xs sm:text-sm text-muted-foreground">
                          <Clock className="w-3 h-3 sm:w-4 sm:h-4" />
                          <span className="hidden sm:inline">Start: {formatTime(clipStartTime)}</span>
                          <span className="sm:hidden">{formatTime(clipStartTime)}</span>
                          {clipEndTime !== null && (
                            <>
                              <span className="hidden sm:inline">•</span>
                              <span className="sm:hidden">-</span>
                              <span className="hidden sm:inline">End: {formatTime(clipEndTime)}</span>
                              <span className="sm:hidden">{formatTime(clipEndTime)}</span>
                              <span>•</span>
                              <span className="hidden sm:inline">Duration: {formatTime(clipEndTime - clipStartTime)}</span>
                              <span className="sm:hidden">{formatTime(clipEndTime - clipStartTime)}</span>
                            </>
                          )}
                        </div>
                      )}
                    </div>
                    
                    {/* Manual Time Input */}
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                      <div className="space-y-2">
                        <label className="text-xs sm:text-sm font-medium text-orange-700 dark:text-orange-300">
                          Start Time (MM:SS)
                        </label>
                        <div className="flex gap-2">
                          <input
                            type="text"
                            placeholder="0:00"
                            className="flex-1 px-3 py-2 text-sm border border-orange-200 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                            onKeyPress={(e) => {
                              if (e.key === 'Enter') {
                                const timeStr = e.currentTarget.value
                                const parts = timeStr.split(':')
                                if (parts.length === 2) {
                                  const minutes = parseInt(parts[0]) || 0
                                  const seconds = parseInt(parts[1]) || 0
                                  const totalSeconds = minutes * 60 + seconds
                                  setManualStartTime(totalSeconds)
                                }
                              }
                            }}
                          />
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                              const input = document.querySelector('input[placeholder="0:00"]') as HTMLInputElement
                              if (input) {
                                const timeStr = input.value
                                const parts = timeStr.split(':')
                                if (parts.length === 2) {
                                  const minutes = parseInt(parts[0]) || 0
                                  const seconds = parseInt(parts[1]) || 0
                                  const totalSeconds = minutes * 60 + seconds
                                  setManualStartTime(totalSeconds)
                                }
                              }
                            }}
                            className="px-3 text-xs sm:text-sm"
                          >
                            Set
                          </Button>
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <label className="text-xs sm:text-sm font-medium text-orange-700 dark:text-orange-300">
                          End Time (MM:SS)
                        </label>
                        <div className="flex gap-2">
                          <input
                            type="text"
                            placeholder="0:30"
                            className="flex-1 px-3 py-2 text-sm border border-orange-200 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                            onKeyPress={(e) => {
                              if (e.key === 'Enter') {
                                const timeStr = e.currentTarget.value
                                const parts = timeStr.split(':')
                                if (parts.length === 2) {
                                  const minutes = parseInt(parts[0]) || 0
                                  const seconds = parseInt(parts[1]) || 0
                                  const totalSeconds = minutes * 60 + seconds
                                  setManualEndTime(totalSeconds)
                                }
                              }
                            }}
                          />
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                              const inputs = document.querySelectorAll('input[placeholder="0:30"]') as NodeListOf<HTMLInputElement>
                              if (inputs.length > 0) {
                                const input = inputs[0]
                                const timeStr = input.value
                                const parts = timeStr.split(':')
                                if (parts.length === 2) {
                                  const minutes = parseInt(parts[0]) || 0
                                  const seconds = parseInt(parts[1]) || 0
                                  const totalSeconds = minutes * 60 + seconds
                                  setManualEndTime(totalSeconds)
                                }
                              }
                            }}
                            className="px-3 text-xs sm:text-sm"
                          >
                            Set
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {isRecording && (
                    <p className="text-xs text-muted-foreground mt-2">
                      <span className="hidden sm:inline">Play the video and click "Stop Clip" when you want to end the recording, or set times manually above</span>
                      <span className="sm:hidden">Play video and tap "Stop Clip" or set times above</span>
                    </p>
                  )}
                </div>

                {/* Notes List Section */}
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <h3 className="text-base sm:text-md font-semibold flex items-center gap-2">
                      <FileText className="w-4 h-4" />
                      <span className="hidden sm:inline">Video Notes</span>
                      <span className="sm:hidden">Notes</span>
                    </h3>
                    <span className="text-xs sm:text-sm text-muted-foreground">
                      {getVideoNotesCount(selectedVideo.id)} note{getVideoNotesCount(selectedVideo.id) !== 1 ? 's' : ''}
                    </span>
                  </div>
                  
                  {getVideoNotes(selectedVideo.id).length > 0 ? (
                    <div className="space-y-2 max-h-64 sm:max-h-96 overflow-y-auto pr-2">
                      {getVideoNotes(selectedVideo.id).map((note) => (
                        <Card key={note.id} className={`hover:shadow-md transition-shadow ${note.isClip ? 'border-orange-200 bg-orange-50/50 dark:bg-orange-950/20' : ''}`}>
                          <CardContent className="p-3 sm:p-4">
                            <div className="flex items-start justify-between gap-2 sm:gap-3">
                              <div className="flex-1 min-w-0">
                                <div className="flex items-center gap-1 sm:gap-2 mb-2">
                                  {note.isClip && (
                                    <div className="flex items-center gap-1 px-1.5 py-0.5 bg-orange-100 dark:bg-orange-900/50 text-orange-700 dark:text-orange-300 rounded-full text-xs font-medium flex-shrink-0">
                                      <Scissors className="w-2.5 h-2.5 sm:w-3 sm:h-3" />
                                      <span className="hidden sm:inline">Clip</span>
                                      <span className="sm:hidden">●</span>
                                    </div>
                                  )}
                                  <span className="text-xs font-medium text-blue-600 bg-blue-50 dark:bg-blue-950/20 px-1.5 sm:px-2 py-0.5 rounded">
                                    Note
                                  </span>
                                  <span className="text-xs text-muted-foreground hidden xs:inline">
                                    Font: {note.fontSize}px
                                  </span>
                                  <span className="text-xs text-muted-foreground">
                                    {new Date(note.createdAt).toLocaleDateString()}
                                  </span>
                                </div>
                                {note.isClip && note.startTime !== null && note.endTime !== null && (
                                  <div className="flex items-center gap-1 sm:gap-2 text-xs text-orange-600 dark:text-orange-400 mb-2">
                                    <Clock className="w-2.5 h-2.5 sm:w-3 sm:h-3" />
                                    <span className="hidden xs:inline">{formatTime(note.startTime)} - {formatTime(note.endTime)}</span>
                                    <span className="xs:hidden">{formatTime(note.startTime)}-{formatTime(note.endTime)}</span>
                                    <span>•</span>
                                    <span>{formatTime(note.endTime - note.startTime)}</span>
                                  </div>
                                )}
                                <p 
                                  className="text-xs sm:text-sm leading-relaxed text-gray-700 dark:text-gray-300 line-clamp-3 sm:line-clamp-none"
                                  style={{ fontSize: `${Math.min(note.fontSize, 14)}px` }}
                                >
                                  {note.note}
                                </p>
                              </div>
                              <div className="flex gap-1 flex-shrink-0">
                                {note.isClip && note.startTime !== null && note.endTime !== null ? (
                                  <>
                                    <Button
                                      size="sm"
                                      className="h-6 w-6 sm:h-8 sm:px-2 bg-orange-500 hover:bg-orange-600 text-white p-0 sm:p-auto"
                                      onClick={() => handleClipPlay(note)}
                                      aria-label={`Play clip: ${note.note.substring(0, 30)}...`}
                                    >
                                      <Play className="w-2.5 h-2.5 sm:w-3 sm:h-3" />
                                    </Button>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => {
                                        const videoObject = {
                                          id: note.videoId,
                                          title: note.title,
                                          channelName: note.channelName,
                                          thumbnail: note.thumbnail,
                                          channel: { name: note.channelName }
                                        }
                                        handleVideoPlay(videoObject as any)
                                      }}
                                      className="h-6 w-6 sm:h-8 sm:px-2 p-0 sm:p-auto"
                                      aria-label={`Play full video: ${note.note.substring(0, 30)}...`}
                                    >
                                      <Play className="w-2.5 h-2.5 sm:w-3 sm:h-3 opacity-60" />
                                    </Button>
                                  </>
                                ) : (
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    onClick={() => {
                                      const videoObject = {
                                        id: note.videoId,
                                        title: note.title,
                                        channelName: note.channelName,
                                        thumbnail: note.thumbnail,
                                        channel: { name: note.channelName }
                                      }
                                      handleVideoPlay(videoObject as any)
                                    }}
                                    className="h-6 w-6 sm:h-8 sm:px-2 p-0 sm:p-auto"
                                    aria-label={`Play video: ${note.note.substring(0, 30)}...`}
                                  >
                                    <Play className="w-2.5 h-2.5 sm:w-3 sm:h-3" />
                                  </Button>
                                )}
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => editNote(note)}
                                  className="h-6 w-6 sm:h-8 sm:px-2 p-0 sm:p-auto"
                                  aria-label={`Edit note: ${note.note.substring(0, 30)}...`}
                                >
                                  <Edit className="w-2.5 h-2.5 sm:w-3 sm:h-3" />
                                </Button>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => deleteNote(note.id)}
                                  className="h-6 w-6 sm:h-8 sm:px-2 p-0 sm:p-auto text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200"
                                  aria-label={`Delete note: ${note.note.substring(0, 30)}...`}
                                >
                                  <svg className="w-2.5 h-2.5 sm:w-3 sm:h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                  </svg>
                                </Button>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-4 sm:py-6 text-muted-foreground border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg">
                      <FileText className="w-6 h-6 sm:w-8 sm:h-8 mx-auto mb-2 opacity-50" />
                      <p className="text-xs sm:text-sm">No notes yet for this video</p>
                      <p className="text-xs mt-1">Click "Add Note" to create your first note</p>
                    </div>
                  )}
                </div>
              </>
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                <Play className="w-12 h-12 mx-auto mb-2 opacity-50" />
                <p>Select a video to play</p>
              </div>
            )}
          </div>
        )

      case 'watched':
        return (
          <div className="space-y-6">
            {/* Header */}
            <div className="bg-gradient-to-r from-orange-10 via-orange-5 to-transparent rounded-2xl p-6 border border-orange-20">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold bg-gradient-to-r from-orange-600 to-orange-400 bg-clip-text text-transparent mb-2">
                    Watch History
                  </h2>
                  <p className="text-muted-foreground">Videos you've recently watched</p>
                </div>
                {watchedVideos.length > 0 && (
                  <div className="flex gap-3">
                    <Badge variant="secondary" className="bg-orange-50 text-orange-600 border-orange-200">
                      {watchedVideos.length} videos
                    </Badge>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={clearWatchedHistory}
                      className="text-red-500 hover:text-red-600 hover:bg-red-50 border-red-200 hover:border-red-300 transition-all duration-200 hover:scale-105"
                    >
                      <Trash2 className="w-4 h-4 mr-2" />
                      Clear History
                    </Button>
                  </div>
                )}
              </div>
            </div>
            
            {watchedVideos.length > 0 ? (
              <div className="space-y-4">
                {/* Sort by date */}
                <div className="flex items-center gap-3 text-sm text-muted-foreground">
                  <Clock className="w-4 h-4" />
                  <span>Sorted by most recent</span>
                </div>
                
                {/* Video Grid */}
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {watchedVideos.map(video => (
                    <Card key={video.id} className="group hover:shadow-xl transition-all duration-300 hover:scale-[1.02] border-border/50 hover:border-orange-30 overflow-hidden">
                      <CardContent className="p-4">
                        <div className="space-y-4">
                          {/* Video Thumbnail */}
                          <div className="relative overflow-hidden rounded-xl">
                            <img
                              src={video.thumbnail}
                              alt={video.title}
                              className="w-full h-40 object-cover transition-transform duration-300 group-hover:scale-105 bg-muted cursor-pointer"
                              onClick={() => {
                                const videoObject = {
                                  id: video.videoId,
                                  title: video.title,
                                  channelName: video.channelName,
                                  thumbnail: video.thumbnail,
                                  channel: { name: video.channelName }
                                }
                                handleVideoPlay(videoObject as any)
                              }}
                            />
                            <div className="absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                            {video.duration && (
                              <Badge className="absolute bottom-2 right-2 text-xs bg-black/80 text-white border-none backdrop-blur-sm">
                                {video.duration}
                              </Badge>
                            )}
                            <div className="absolute top-2 left-2 bg-orange-600 text-white text-xs px-2 py-1 rounded-full flex items-center gap-1">
                              <Clock className="w-3 h-3" />
                              Watched
                            </div>
                          </div>
                          
                          {/* Video Info */}
                          <div className="space-y-2">
                            <h4 
                              className="font-semibold text-sm line-clamp-2 cursor-pointer hover:text-orange-600 transition-colors"
                              onClick={() => {
                                const videoObject = {
                                  id: video.videoId,
                                  title: video.title,
                                  channelName: video.channelName,
                                  thumbnail: video.thumbnail,
                                  channel: { name: video.channelName }
                                }
                                handleVideoPlay(videoObject as any)
                              }}
                            >
                              {video.title}
                            </h4>
                            <p className="text-xs text-muted-foreground flex items-center gap-1">
                              <span className="w-1.5 h-1 bg-orange-400 rounded-full"></span>
                              {video.channelName}
                            </p>
                            
                            {/* Watched Timestamp */}
                            <div className="flex items-center justify-between text-xs text-muted-foreground pt-2 border-t border-border/50">
                              <div className="flex items-center gap-2">
                                <Clock className="w-3 h-3 text-orange-500" />
                                <span className="font-medium">
                                  {new Date(video.watchedAt).toLocaleDateString()}
                                </span>
                              </div>
                              <span className="text-xs">
                                {new Date(video.watchedAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                              </span>
                            </div>
                            
                            {/* Video Stats */}
                            <div className="flex items-center justify-between text-xs text-muted-foreground">
                              {video.viewCount && (
                                <span>{formatViewCount(video.viewCount)}</span>
                              )}
                              {video.duration && (
                                <span>{video.duration}</span>
                              )}
                            </div>
                          </div>
                          
                          {/* Actions */}
                          <div className="flex gap-2 pt-2 border-t border-border/50">
                            <Button
                              size="sm"
                              onClick={() => {
                                const videoObject = {
                                  id: video.videoId,
                                  title: video.title,
                                  channelName: video.channelName,
                                  thumbnail: video.thumbnail,
                                  channel: { name: video.channelName }
                                }
                                handleVideoPlay(videoObject as any)
                              }}
                              className="flex-1 h-8 bg-orange-600 hover:bg-orange-700 text-white shadow-md hover:shadow-lg transition-all duration-200 hover:scale-105"
                            >
                              <Play className="w-3 h-3 mr-1.5" />
                              Watch Again
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            ) : (
              <div className="text-center py-16">
                <div className="relative inline-block mb-6">
                  <div className="absolute inset-0 bg-orange-500/20 blur-3xl rounded-full"></div>
                  <Clock className="w-20 h-20 text-muted-foreground relative" />
                </div>
                <h3 className="text-xl font-semibold mb-2">No Watch History</h3>
                <p className="text-muted-foreground mb-6 max-w-md mx-auto">
                  Videos you watch will appear here with timestamps and playback options
                </p>
                <Button 
                  onClick={() => setActiveTab('search')} 
                  className="hover:scale-105 transition-transform duration-200"
                >
                  <Search className="w-4 h-4 mr-2" />
                  Discover Videos
                </Button>
              </div>
            )}
          </div>
        )

      case 'channels':
        return (
          <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-lg font-semibold">Discover Channels</h2>
              {favoriteChannels.length > 0 && (
                <Badge variant="secondary">{favoriteChannels.length} followed</Badge>
              )}
            </div>
            
            {/* Channel Search */}
            <div className="space-y-4">
              <div className="flex gap-2">
                <Input
                  placeholder="Search for channels to follow..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && !channelSearchLoading && handleChannelSearch()}
                  className="flex-1"
                  disabled={channelSearchLoading}
                />
                <Button
                  onClick={handleChannelSearch}
                  disabled={channelSearchLoading || !searchQuery.trim()}
                  size="sm"
                >
                  {channelSearchLoading ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Search className="w-4 h-4" />
                  )}
                </Button>
              </div>
              
              {/* Channel Search Results */}
              {channelSearchResults.length > 0 && (
                <div>
                  <h3 className="font-medium mb-3">Search Results</h3>
                  <div className="grid gap-3 md:grid-cols-2 lg:grid-cols-3">
                    {channelSearchResults.map(channel => (
                      <Card key={channel.id} className="hover:shadow-lg transition-all duration-200 group">
                        <CardContent className="p-4">
                          <div className="space-y-3">
                            {/* Channel Header */}
                            <div className="flex items-center gap-3">
                              <div className="relative">
                                <img
                                  src={getChannelThumbnailUrl(channel)}
                                  alt={channel.name}
                                  className="w-12 h-12 rounded-full object-cover bg-muted border-2 border-border group-hover:border-primary transition-colors"
                                  onError={(e) => {
                                    e.currentTarget.src = 'https://www.youtube.com/img/desktop/yt_1200.png'
                                  }}
                                  loading="lazy"
                                />
                                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-primary rounded-full flex items-center justify-center">
                                  <User className="w-2 h-2 text-primary-foreground" />
                                </div>
                              </div>
                              <div className="flex-1 min-w-0">
                                <h3 className="font-semibold text-sm truncate group-hover:text-primary transition-colors">
                                  {channel.name}
                                </h3>
                                {channel.subscriberCount && (
                                  <p className="text-xs text-muted-foreground">
                                    {formatViewCount(channel.subscriberCount).replace('views', 'subscribers')}
                                  </p>
                                )}
                                {channel.videoCount && (
                                  <p className="text-xs text-muted-foreground">
                                    {channel.videoCount.toLocaleString()} videos
                                  </p>
                                )}
                              </div>
                            </div>

                            {/* Channel Actions */}
                            <div className="flex gap-2">
                              <Button
                                size="sm"
                                onClick={() => {
                                  setSearchQuery(channel.name)
                                  setActiveTab('search')
                                  handleSearch()
                                }}
                                variant="outline"
                                className="flex-1"
                              >
                                <Search className="w-3 h-3 mr-1" />
                                Browse
                              </Button>
                              <Button
                                size="sm"
                                onClick={() => toggleFollowChannel(channel)}
                                className="flex-1"
                              >
                                <Plus className="w-3 h-3 mr-1" />
                                Follow
                              </Button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              )}
            </div>
            
            {/* Followed Channels */}
            {favoriteChannels.length > 0 && (
              <div>
                <h3 className="font-medium mb-3">Followed Channels</h3>
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {favoriteChannels.map(channel => (
                    <Card key={channel.id} className="hover:shadow-lg transition-all duration-200 group">
                      <CardContent className="p-6">
                        <div className="space-y-4">
                          {/* Channel Header */}
                          <div className="flex items-center gap-4">
                            <div className="relative">
                              <img
                                src={getChannelThumbnailUrl(channel)}
                                alt={channel.name}
                                className="w-16 h-16 rounded-full object-cover bg-muted border-2 border-border group-hover:border-primary transition-colors"
                                onError={(e) => {
                                  e.currentTarget.src = 'https://www.youtube.com/img/desktop/yt_1200.png'
                                }}
                                loading="lazy"
                              />
                              <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-primary rounded-full flex items-center justify-center">
                                <User className="w-3 h-3 text-primary-foreground" />
                              </div>
                            </div>
                            <div className="flex-1 min-w-0">
                              <h3 className="font-semibold text-base truncate group-hover:text-primary transition-colors">
                                {channel.name}
                              </h3>
                              {channel.subscriberCount && (
                                <p className="text-sm text-muted-foreground">
                                  {formatViewCount(channel.subscriberCount).replace('views', 'subscribers')}
                                </p>
                              )}
                            </div>
                          </div>

                          {/* Channel Actions */}
                          <div className="flex gap-2">
                            <Button
                              size="sm"
                              onClick={() => {
                                setSearchQuery(channel.name)
                                setActiveTab('search')
                                handleSearch()
                              }}
                              className="flex-1"
                            >
                              <Search className="w-4 h-4 mr-2" />
                              Browse Videos
                            </Button>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => unfollowChannel(channel.channelId)}
                              className="text-red-500 hover:text-red-600 hover:bg-red-50"
                            >
                              <Heart className="w-4 h-4" />
                            </Button>
                          </div>

                          {/* Channel Stats */}
                          <div className="pt-2 border-t border-border">
                            <div className="flex items-center justify-between text-xs text-muted-foreground">
                              <span>Following</span>
                              <span>Since {new Date().toLocaleDateString()}</span>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            )}
            
            {favoriteChannels.length === 0 && channelSearchResults.length === 0 && (
              <div className="text-center py-12 text-muted-foreground">
                <Users className="w-16 h-16 mx-auto mb-4 opacity-50" />
                <h3 className="text-lg font-medium mb-2">Discover Channels</h3>
                <p className="text-sm mb-4">Search for channels to follow and see their latest videos on your home page!</p>
                <div className="max-w-md mx-auto">
                  <Input
                    placeholder="e.g. TED, National Geographic..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && !channelSearchLoading && handleChannelSearch()}
                    disabled={channelSearchLoading}
                    className="text-center"
                  />
                </div>
              </div>
            )}

            {/* Channel Management Tips */}
            {favoriteChannels.length > 0 && (
              <div className="bg-muted/50 rounded-lg p-4">
                <h4 className="font-medium text-sm mb-2">Channel Management Tips</h4>
                <ul className="text-xs text-muted-foreground space-y-1">
                  <li>• Search for channels above and click "Follow" to add them to your list</li>
                  <li>• Videos from followed channels appear on your home page</li>
                  <li>• Click the heart icon to unfollow a channel</li>
                  <li>• Click "Browse Videos" to search for content from specific channels</li>
                </ul>
              </div>
            )}
          </div>
        )

      case 'notes':
        return (
          <div className="space-y-3 sm:space-y-4">
            <div className="flex items-center justify-between">
              <h2 className="text-lg font-semibold">Video Notes</h2>
              <span className="text-sm text-muted-foreground">
                {videoNotes.length} {videoNotes.length === 1 ? 'note' : 'notes'}
              </span>
            </div>
            {videoNotes.length > 0 ? (
              <div className="space-y-2 sm:space-y-3">
                {videoNotes.map(note => (
                  <Card key={note.id} className={`hover:shadow-md transition-shadow ${note.isClip ? 'border-orange-200 bg-orange-50/50 dark:bg-orange-950/20' : ''}`}>
                    <CardContent className="p-3 sm:p-4">
                      <div className="flex gap-2 sm:gap-3">
                        {note.thumbnail && (
                          <img
                            src={note.thumbnail}
                            alt={note.title}
                            className="w-16 h-12 sm:w-20 sm:h-16 object-cover rounded bg-muted cursor-pointer hover:opacity-80 transition-opacity flex-shrink-0"
                            onClick={() => {
                              // Create a video object from note and play it
                              const videoObject = {
                                id: note.videoId,
                                title: note.title,
                                channelName: note.channelName,
                                thumbnail: note.thumbnail,
                                channel: { name: note.channelName }
                              }
                              handleVideoPlay(videoObject as any)
                            }}
                          />
                        )}
                        <div className="flex-1 min-w-0">
                          <div className="flex items-start justify-between">
                            <div className="flex-1 min-w-0">
                              <div className="flex items-center gap-1 sm:gap-2 mb-1">
                                <h3 
                                  className="font-medium text-sm cursor-pointer hover:text-primary transition-colors line-clamp-1"
                                  onClick={() => {
                                    // Create a video object from note and play it
                                    const videoObject = {
                                      id: note.videoId,
                                      title: note.title,
                                      channelName: note.channelName,
                                      thumbnail: note.thumbnail,
                                      channel: { name: note.channelName }
                                    }
                                    handleVideoPlay(videoObject as any)
                                  }}
                                >
                                  {note.title}
                                </h3>
                                {note.isClip && (
                                  <div className="flex items-center gap-1 px-1.5 py-0.5 bg-orange-100 dark:bg-orange-900/50 text-orange-700 dark:text-orange-300 rounded-full text-xs font-medium flex-shrink-0">
                                    <Scissors className="w-2.5 h-2.5 sm:w-3 sm:h-3" />
                                    <span className="hidden sm:inline">Clip</span>
                                    <span className="sm:hidden">●</span>
                                  </div>
                                )}
                              </div>
                              <p className="text-xs text-muted-foreground mb-2 line-clamp-1">{note.channelName}</p>
                              {note.isClip && note.startTime !== null && note.endTime !== null && (
                                <div className="flex items-center gap-1 sm:gap-2 text-xs text-orange-600 dark:text-orange-400 mb-2">
                                  <Clock className="w-2.5 h-2.5 sm:w-3 sm:h-3" />
                                  <span className="hidden xs:inline">{formatTime(note.startTime)} - {formatTime(note.endTime)}</span>
                                  <span className="xs:hidden">{formatTime(note.startTime)}-{formatTime(note.endTime)}</span>
                                  <span>•</span>
                                  <span>{formatTime(note.endTime - note.startTime)}</span>
                                </div>
                              )}
                            </div>
                            <div className="flex gap-1 ml-1 sm:ml-2 flex-shrink-0">
                              {note.isClip && note.startTime !== null && note.endTime !== null ? (
                                <>
                                  <Button
                                    size="sm"
                                    className="h-6 w-6 sm:h-7 sm:px-2 bg-orange-500 hover:bg-orange-600 text-white p-0 sm:p-auto"
                                    onClick={() => handleClipPlay(note)}
                                    aria-label={`Play clip: ${note.title}`}
                                  >
                                    <Play className="w-2.5 h-2.5 sm:w-3 sm:h-3" />
                                  </Button>
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    onClick={() => {
                                      const videoObject = {
                                        id: note.videoId,
                                        title: note.title,
                                        channelName: note.channelName,
                                        thumbnail: note.thumbnail,
                                        channel: { name: note.channelName }
                                      }
                                      handleVideoPlay(videoObject as any)
                                    }}
                                    className="h-6 w-6 sm:h-7 sm:px-2 p-0 sm:p-auto"
                                    aria-label={`Play full video: ${note.title}`}
                                  >
                                    <Play className="w-2.5 h-2.5 sm:w-3 sm:h-3 opacity-60" />
                                  </Button>
                                </>
                              ) : (
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => {
                                    const videoObject = {
                                      id: note.videoId,
                                      title: note.title,
                                      channelName: note.channelName,
                                      thumbnail: note.thumbnail,
                                      channel: { name: note.channelName }
                                    }
                                    handleVideoPlay(videoObject as any)
                                  }}
                                  className="h-6 w-6 sm:h-7 sm:px-2 p-0 sm:p-auto"
                                  aria-label={`Play video: ${note.title}`}
                                >
                                  <Play className="w-2.5 h-2.5 sm:w-3 sm:h-3" />
                                </Button>
                              )}
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => {
                                  setCurrentNoteVideo({
                                    id: note.videoId,
                                    title: note.title,
                                    channelName: note.channelName,
                                    thumbnail: note.thumbnail,
                                    channel: { name: note.channelName }
                                  } as any)
                                  setCurrentNote(note.note)
                                  setCurrentNoteId(note.id)
                                  setNoteFontSize(note.fontSize)
                                  setNoteDialogOpen(true)
                                }}
                                className="h-6 w-6 sm:h-7 sm:px-2 p-0 sm:p-auto"
                                aria-label={`Edit note for: ${note.title}`}
                              >
                                <Edit className="w-2.5 h-2.5 sm:w-3 sm:h-3" />
                              </Button>
                            </div>
                          </div>
                          <div className="mt-2 p-2 sm:p-3 bg-muted rounded-lg">
                            <p 
                              className="text-xs sm:text-sm leading-relaxed line-clamp-2 sm:line-clamp-none"
                              style={{ fontSize: `${Math.min(note.fontSize, 14)}px` }}
                            >
                              {note.note}
                            </p>
                          </div>
                          <div className="flex items-center justify-between mt-2 text-xs text-muted-foreground">
                            <span className="hidden sm:inline">Font size: {note.fontSize}px</span>
                            <span className="sm:hidden">{note.fontSize}px</span>
                            <span>{new Date(note.createdAt).toLocaleDateString()}</span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : (
              <div className="text-center py-6 sm:py-8 text-muted-foreground">
                <FileText className="w-8 h-8 sm:w-12 sm:h-12 mx-auto mb-2 opacity-50" />
                <p className="text-xs sm:text-sm">No notes yet. Add notes while watching videos!</p>
              </div>
            )}
          </div>
        )

      case 'favorites':
        return (
          <div className="space-y-6">
            {/* Favorite Videos Section */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold">Favorite Videos</h2>
                {favoriteVideos.length > 0 && (
                  <Badge variant="secondary">{favoriteVideos.length}</Badge>
                )}
              </div>
              {favoriteVideos.length > 0 ? (
                <div className="space-y-2">
                  {favoriteVideos.map(video => (
                    <VideoCard key={video.id} video={video} />
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  <Heart className="w-12 h-12 mx-auto mb-2 opacity-50" />
                  <p>No favorite videos yet</p>
                  <p className="text-sm mt-1">Add videos to favorites while watching or searching</p>
                </div>
              )}
            </div>

            {/* Favorite Channels Section */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold">Favorite Channels</h2>
                {favoriteChannels.length > 0 && (
                  <Badge variant="secondary">{favoriteChannels.length}</Badge>
                )}
              </div>
              {favoriteChannels.length > 0 ? (
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {favoriteChannels.map(channel => (
                    <Card key={channel.id} className="hover:shadow-md transition-shadow">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="relative flex-shrink-0">
                            <img
                              src={getChannelThumbnailUrl(channel)}
                              alt={channel.name}
                              className="w-12 h-12 rounded-full object-cover bg-muted"
                              onError={(e) => {
                                e.currentTarget.src = 'https://www.youtube.com/img/desktop/yt_1200.png'
                              }}
                              loading="lazy"
                            />
                          </div>
                          <div className="flex-1 min-w-0">
                            <h3 className="font-medium text-sm truncate">{channel.name}</h3>
                            {channel.subscriberCount && (
                              <p className="text-xs text-muted-foreground">
                                {formatViewCount(channel.subscriberCount).replace('views', 'subscribers')}
                              </p>
                            )}
                          </div>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                              // Search for this channel's videos
                              setSearchQuery(channel.name)
                              setActiveTab('search')
                              handleSearch()
                            }}
                            className="h-8 px-2"
                          >
                            <Search className="w-3 h-3 mr-1" />
                            Browse
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  <User className="w-12 h-12 mx-auto mb-2 opacity-50" />
                  <p>No favorite channels yet</p>
                  <p className="text-sm mt-1">Add channels to favorites while watching videos</p>
                </div>
              )}
            </div>

            {favoriteVideos.length === 0 && favoriteChannels.length === 0 && (
              <div className="text-center py-12 text-muted-foreground">
                <Heart className="w-16 h-16 mx-auto mb-4 opacity-50" />
                <h3 className="text-lg font-medium mb-2">No Favorites Yet</h3>
                <p className="text-sm mb-4">Start adding videos and channels to your favorites!</p>
                <Button onClick={() => setActiveTab('search')}>
                  <Search className="w-4 h-4 mr-2" />
                  Discover Videos
                </Button>
              </div>
            )}
          </div>
        )

      default:
        return null
    }
  }

  return (
    <>
      {/* Splash Screen */}
      {showSplashScreen && <SplashScreen onComplete={handleSplashComplete} />}
      
      {/* Main App */}
      {!showSplashScreen && (
        <div className="h-screen bg-gradient-to-br from-background via-background to-muted/20 flex flex-col">
          {/* Header */}
          <header className="sticky top-0 z-40 bg-background/80 backdrop-blur-lg border-b border-border/50 shadow-sm" role="banner">
            <div className="container mx-auto px-4 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="relative">
                    <div className="absolute inset-0 bg-primary/20 blur-xl rounded-full"></div>
                    <Play className="w-6 h-6 text-primary relative" aria-hidden="true" />
                  </div>
                  <div>
                    <h1 className="text-xl font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent">MyTube</h1>
                    <p className="text-xs text-muted-foreground">Your YouTube Companion</p>
                  </div>
                </div>
                <div className="flex items-center gap-4">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowSettings(true)}
                    className="hover:bg-muted/80 transition-colors duration-200"
                    title="Settings"
                  >
                    <Settings className="w-5 h-5" />
                  </Button>
                  <div className="text-right">
                    <p className="text-xs text-muted-foreground">© 2025 Mohamed Adel</p>
                    <p className="text-xs text-muted-foreground">Version 2.0</p>
                  </div>
                </div>
              </div>
            </div>
          </header>

          {/* Main Content */}
          <main className="flex-1 overflow-hidden" role="main">
            <ScrollArea className="h-full">
              <div className="container mx-auto px-4 py-6 max-w-7xl">
                {renderTabContent()}
              </div>
            </ScrollArea>
          </main>

          {/* Bottom Navigation */}
          <nav className="bg-background/90 backdrop-blur-xl border-t border-border/50 shadow-2xl" role="navigation" aria-label="Main navigation">
            {/* Swipe hint for touch devices */}
            <div className="bg-gradient-to-r from-primary/5 via-primary/10 to-primary/5 text-center text-xs text-muted-foreground py-2 border-b border-border/30">
              <span className="inline-flex items-center gap-2">
                <span className="w-1 h-1 bg-primary rounded-full animate-pulse"></span>
                <span>Swipe left/right or use arrow keys to navigate</span>
                <span className="w-1 h-1 bg-primary rounded-full animate-pulse"></span>
              </span>
            </div>
            <div className="flex justify-around py-3 bg-gradient-to-t from-background to-background/50">
              {tabs.map(({ id, icon: Icon, label }) => (
                <button
                  key={id}
                  onClick={() => setActiveTab(id)}
                  className={`group flex flex-col items-center gap-1.5 px-4 py-2 rounded-xl transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary/50 ${
                    activeTab === id 
                      ? 'text-primary bg-primary/10 shadow-lg scale-105' 
                      : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'
                  }`}
                  aria-label={`Navigate to ${label}`}
                  aria-current={activeTab === id ? 'page' : undefined}
                >
                  <div className="relative">
                    <Icon className={`w-5 h-5 transition-transform duration-200 ${
                      activeTab === id ? 'scale-110' : 'group-hover:scale-105'
                    }`} aria-hidden="true" />
                    {activeTab === id && (
                      <div className="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-primary rounded-full"></div>
                    )}
                  </div>
                  <span className={`text-xs font-medium transition-all duration-200 ${
                    activeTab === id ? 'font-semibold' : ''
                  }`}>{label}</span>
                </button>
              ))}
            </div>
          </nav>

      {/* Note Dialog */}
      <Dialog open={noteDialogOpen} onOpenChange={setNoteDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>{currentNoteId ? 'Edit Note' : 'Add Note'}</DialogTitle>
          </DialogHeader>
          {currentNoteVideo && (
            <div className="space-y-4">
              <div className="flex gap-2">
                <img
                  src={getThumbnailUrl(currentNoteVideo)}
                  alt={currentNoteVideo.title}
                  className="w-16 h-12 object-cover rounded bg-muted"
                  onError={(e) => {
                    e.currentTarget.src = 'https://www.youtube.com/img/desktop/yt_1200.png'
                  }}
                />
                <div className="flex-1">
                  <p className="text-sm font-medium line-clamp-2">{currentNoteVideo.title}</p>
                  <p className="text-xs text-muted-foreground">{getChannelName(currentNoteVideo)}</p>
                </div>
              </div>
              <Textarea
                placeholder="Write your note here..."
                value={currentNote}
                onChange={(e) => setCurrentNote(e.target.value)}
                rows={4}
                className="resize-none"
              />
              <div className="flex items-center gap-2">
                <label className="text-sm font-medium">Font Size:</label>
                <Select value={noteFontSize.toString()} onValueChange={(v) => setNoteFontSize(parseInt(v))}>
                  <SelectTrigger className="w-20">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="12">12px</SelectItem>
                    <SelectItem value="14">14px</SelectItem>
                    <SelectItem value="16">16px</SelectItem>
                    <SelectItem value="18">18px</SelectItem>
                    <SelectItem value="20">20px</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="flex justify-between gap-2">
                <div className="flex gap-2">
                  {currentNoteId && (
                    <Button 
                      variant="outline" 
                      onClick={async () => {
                        try {
                          await fetch(`/api/notes/${currentNoteId}`, { 
                            method: 'DELETE' 
                          })
                          showToast('Note Deleted', 'Note deleted successfully', 'info')
                          setNoteDialogOpen(false)
                          setCurrentNote('')
                          setCurrentNoteVideo(null)
                          setCurrentNoteId(null)
                          await loadVideoNotes()
                        } catch (error) {
                          showToast('Delete Failed', 'Failed to delete note', 'error')
                        }
                      }}
                      className="text-destructive hover:text-destructive"
                    >
                      Delete
                    </Button>
                  )}
                </div>
                <div className="flex gap-2">
                  <Button variant="outline" onClick={() => {
                    setNoteDialogOpen(false)
                    setCurrentNote('')
                    setCurrentNoteVideo(null)
                    setCurrentNoteId(null)
                  }}>
                    Cancel
                  </Button>
                  <Button onClick={addNote} disabled={!currentNote.trim()}>
                    {currentNoteId ? 'Update Note' : 'Save Note'}
                  </Button>
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="text-red-600">Delete Note</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div className="flex items-center gap-3 py-2">
              <div className="w-10 h-10 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center">
                <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <div>
                <p className="font-medium">Are you sure you want to delete this note?</p>
                <p className="text-sm text-muted-foreground">This action cannot be undone.</p>
              </div>
            </div>
            
            {noteToDelete && (
              <div className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <p className="text-sm text-gray-700 dark:text-gray-300">
                  {getVideoNotes(noteToDelete).find(n => n.id === noteToDelete)?.note}
                </p>
              </div>
            )}
            
            <div className="flex gap-2 justify-end pt-2">
              <Button
                variant="outline"
                onClick={() => {
                  setDeleteConfirmOpen(false)
                  setNoteToDelete(null)
                }}
              >
                Cancel
              </Button>
              <Button
                variant="destructive"
                onClick={confirmDeleteNote}
                disabled={dynamicLoadingMessage.includes('Deleting')}
              >
                {dynamicLoadingMessage.includes('Deleting') ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Deleting...
                  </>
                ) : (
                  'Delete Note'
                )}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Clip Recording Dialog */}
      <Dialog open={clipDialogOpen} onOpenChange={setClipDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Scissors className="w-5 h-5 text-orange-600" />
              Save Video Clip
            </DialogTitle>
          </DialogHeader>
          {selectedVideo && clipStartTime !== null && clipEndTime !== null && (
            <div className="space-y-4">
              <div className="flex gap-2">
                <img
                  src={getThumbnailUrl(selectedVideo)}
                  alt={selectedVideo.title}
                  className="w-16 h-12 object-cover rounded bg-muted"
                  onError={(e) => {
                    e.currentTarget.src = 'https://www.youtube.com/img/desktop/yt_1200.png'
                  }}
                />
                <div className="flex-1">
                  <p className="text-sm font-medium line-clamp-2">{selectedVideo.title}</p>
                  <p className="text-xs text-muted-foreground">{getChannelName(selectedVideo)}</p>
                </div>
              </div>
              
              <div className="bg-orange-50 dark:bg-orange-900/20 rounded-lg p-3 border border-orange-200 dark:border-orange-800">
                <div className="flex items-center justify-between text-sm">
                  <span className="font-medium text-orange-700 dark:text-orange-300">Clip Duration</span>
                  <span className="text-orange-600 dark:text-orange-400">
                    {formatTime(clipStartTime)} - {formatTime(clipEndTime)}
                  </span>
                </div>
                <div className="text-center text-orange-600 dark:text-orange-400 font-medium mt-1">
                  Total: {formatTime(clipEndTime - clipStartTime)}
                </div>
              </div>
              
              <Textarea
                placeholder="Add a note for this clip (optional)..."
                value={clipNote}
                onChange={(e) => setClipNote(e.target.value)}
                rows={3}
                className="resize-none"
              />
              
              <div className="flex gap-2 justify-end">
                <Button
                  variant="outline"
                  onClick={() => {
                    setClipDialogOpen(false)
                    setClipNote('')
                    setClipStartTime(null)
                    setClipEndTime(null)
                  }}
                >
                  Cancel
                </Button>
                <Button
                  onClick={saveClipNote}
                  className="bg-orange-500 hover:bg-orange-600 text-white"
                >
                  <Save className="w-4 h-4 mr-2" />
                  Save Clip
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Settings Dialog */}
      <Dialog open={showSettings} onOpenChange={setShowSettings}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Settings className="w-5 h-5" />
              Settings
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-6">
            {/* Database Statistics */}
            <div className="space-y-3">
              <h3 className="text-lg font-medium">Database Statistics</h3>
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-muted/50 rounded-lg p-3">
                  <div className="text-2xl font-bold text-blue-600">{watchedVideos.length}</div>
                  <div className="text-sm text-muted-foreground">Watched Videos</div>
                </div>
                <div className="bg-muted/50 rounded-lg p-3">
                  <div className="text-2xl font-bold text-green-600">{favoriteChannels.length}</div>
                  <div className="text-sm text-muted-foreground">Favorite Channels</div>
                </div>
                <div className="bg-muted/50 rounded-lg p-3">
                  <div className="text-2xl font-bold text-red-600">{favoriteVideos.length}</div>
                  <div className="text-sm text-muted-foreground">Favorite Videos</div>
                </div>
                <div className="bg-muted/50 rounded-lg p-3">
                  <div className="text-2xl font-bold text-purple-600">{videoNotes.length}</div>
                  <div className="text-sm text-muted-foreground">Video Notes</div>
                </div>
              </div>
            </div>

            {/* Cache Management */}
            <div className="space-y-3">
              <h3 className="text-lg font-medium">Cache Management</h3>
              <div className="bg-muted/50 rounded-lg p-3">
                <div className="text-sm text-muted-foreground mb-2">Search Cache</div>
                <div className="text-lg font-medium">{searchCache.size} cached searches</div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setSearchCache(new Map())
                    showToast('Cache Cleared', 'Search cache has been cleared', 'success')
                  }}
                  className="mt-2"
                >
                  Clear Cache
                </Button>
              </div>
            </div>

            {/* Database Actions */}
            <div className="space-y-3">
              <h3 className="text-lg font-medium text-red-600">Database Actions</h3>
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <p className="text-sm text-red-700 mb-3">
                  <strong>Warning:</strong> This action will permanently delete all data from the database. 
                  This includes watched videos, favorite channels, favorite videos, and notes.
                </p>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={async () => {
                    if (confirm('Are you sure you want to delete all data? This action cannot be undone.')) {
                      try {
                        const response = await fetch('/api/clean-db', { method: 'POST' })
                        const data = await response.json()
                        
                        if (data.success) {
                          // Reload all data
                          await Promise.all([
                            loadWatchedVideos(),
                            loadFavoriteChannels(),
                            loadFavoriteVideos(),
                            loadVideoNotes()
                          ])
                          
                          showToast('Database Cleaned', 'All data has been successfully deleted', 'success')
                          setShowSettings(false)
                        } else {
                          showToast('Error', data.error || 'Failed to clean database', 'error')
                        }
                      } catch (error) {
                        showToast('Error', 'Failed to clean database', 'error')
                      }
                    }
                  }}
                >
                  <Trash2 className="w-4 h-4 mr-2" />
                  Clean All Database
                </Button>
              </div>
            </div>

            {/* App Information */}
            <div className="space-y-3">
              <h3 className="text-lg font-medium">About</h3>
              <div className="bg-muted/50 rounded-lg p-4 space-y-2">
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Version</span>
                  <span className="text-sm font-medium">2.0</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Author</span>
                  <span className="text-sm font-medium">Mohamed Adel</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">YouTube API</span>
                  <span className="text-sm font-medium">youtubei.js</span>
                </div>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      <Toaster />
        </div>
      )}
    </>
  )
}